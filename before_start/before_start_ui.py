# before_start_ui_improved.py - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° MBB (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)

import customtkinter as ctk
from tkinter import messagebox
import tkinter.font as tkfont
import subprocess
import sys
import os
import threading
import json
from checkers import APIChecker, SystemChecker, DataChecker


class BeforeStartUI:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("MBB Pre-Start System Check")
        self.root.geometry("850x600")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.root.resizable(False, False)
        
        # Add flag to track window state
        self._is_destroyed = False
        self.root.protocol("WM_DELETE_WINDOW", self._on_window_close)
        
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # Load custom font
        self._load_custom_font()
        
        # Initialize checkers
        self.api_checker = APIChecker()
        self.system_checker = SystemChecker() 
        self.data_checker = DataChecker()
        
        # Check results
        self.check_results = {}
        self.can_start = False
        self.force_start = False
        self.auto_start_timer = None
        self.auto_start_countdown = 5
        
        # Skip check preference
        self.skip_next_time = ctk.BooleanVar(value=self._load_skip_preference())
        
        # UI Components
        self.status_labels = {}
        self.status_icons = {}
        self.action_buttons = {}
        
        self._setup_ui()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á skip ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self.skip_next_time.get():
            self._safe_after(100, self._auto_skip_and_start)
        else:
            self._safe_after(100, self.run_all_checks)

    def _load_custom_font(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå Anuphan.ttf"""
        try:
            current_dir = os.path.dirname(os.path.abspath(__file__))
            project_root = os.path.dirname(current_dir)
            font_path = os.path.join(project_root, "fonts", "Anuphan.ttf")
            
            if os.path.exists(font_path):
                try:
                    import ctypes
                    gdi32 = ctypes.windll.gdi32
                    gdi32.AddFontResourceW(font_path)
                except:
                    pass
                
                self.font_loaded = True
            else:
                self.font_loaded = False
                
        except Exception:
            self.font_loaded = False
    def _get_anuphan_font(self, size=14, weight="normal"):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå Anuphan ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CTk components"""
        if self.font_loaded:
            try:
                return ctk.CTkFont(family="Anuphan", size=size, weight=weight)
            except:
                return ctk.CTkFont(size=size, weight=weight)
        else:
            return ctk.CTkFont(size=size, weight=weight)

    def _load_skip_preference(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ skip check ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            pref_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "skip_preference.json")
            if os.path.exists(pref_file):
                with open(pref_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get("skip_next_time", False)
        except:
            pass
        return False

    def _save_skip_preference(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ skip check"""
        try:
            pref_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "skip_preference.json")
            with open(pref_file, 'w', encoding='utf-8') as f:
                json.dump({"skip_next_time": self.skip_next_time.get()}, f)
        except:
            pass
    
    def _safe_after(self, delay, func, *args):
        """Safely call root.after with checks"""
        try:
            if not self._is_destroyed and self.root.winfo_exists():
                return self.root.after(delay, func, *args)
        except Exception:
            pass
        return None
    
    def _on_window_close(self):
        """Handle window close event"""
        self._is_destroyed = True
        self.root.destroy()
    def _auto_skip_and_start(self):
        """‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
        self.summary_label.configure(
            text="‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...",
            font=self._get_anuphan_font(size=18, weight="bold"),
            text_color="#fbbf24"
        )
        self.force_start = True
        self._safe_after(1000, self.start_mbb)

    def _setup_ui(self):
        # Header
        header_frame = ctk.CTkFrame(self.root, height=80)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        header_frame.pack_propagate(False)

        ctk.CTkLabel(header_frame, text="MBB Pre-Start System Check",
                    font=self._get_anuphan_font(size=26, weight="bold")).pack(pady=5)
        
        ctk.CTkLabel(header_frame, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö...",
                    font=self._get_anuphan_font(size=14, weight="normal"), 
                    text_color="gray").pack()

        # Main content - 3 columns layout
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # Left column - API
        left_frame = ctk.CTkFrame(main_frame)
        left_frame.pack(side="left", fill="both", expand=True, padx=(15, 5), pady=15)
        self._create_check_section(left_frame, "üîë API Configuration", "api")
        # Middle column - System
        middle_frame = ctk.CTkFrame(main_frame)
        middle_frame.pack(side="left", fill="both", expand=True, padx=5, pady=15)
        self._create_check_section(middle_frame, "üíª System Requirements", "system")

        # Right column - Data
        right_frame = ctk.CTkFrame(main_frame)
        right_frame.pack(side="left", fill="both", expand=True, padx=(5, 15), pady=15)
        self._create_check_section(right_frame, "üìÅ Data Files", "data")

        # Summary
        self.summary_frame = ctk.CTkFrame(self.root)
        self.summary_frame.pack(fill="x", padx=20, pady=10)
        
        self.summary_label = ctk.CTkLabel(self.summary_frame, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...", 
                                         font=self._get_anuphan_font(size=16, weight="normal"))
        self.summary_label.pack(pady=10)

        # Action buttons frame
        button_frame = ctk.CTkFrame(self.root)
        button_frame.pack(fill="x", padx=20, pady=(0, 20))

        # Skip checkbox (‡∏ã‡πâ‡∏≤‡∏¢)
        skip_frame = ctk.CTkFrame(button_frame, fg_color="transparent")
        skip_frame.pack(side="left", padx=5)
        
        self.skip_checkbox = ctk.CTkCheckBox(
            skip_frame, 
            text="‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ (Skip checks next time)",
            variable=self.skip_next_time,
            command=self._save_skip_preference,
            font=self._get_anuphan_font(size=14, weight="normal")
        )
        self.skip_checkbox.pack()
        # Action buttons (‡∏Ç‡∏ß‡∏≤)
        action_frame = ctk.CTkFrame(button_frame, fg_color="transparent")
        action_frame.pack(side="right")

        self.cancel_auto_btn = ctk.CTkButton(
            action_frame, text="Cancel Auto Start", 
            command=self.cancel_auto_start,
            fg_color="orange", width=140, state="disabled"
        )
        self.cancel_auto_btn.pack(side="left", padx=5)

        self.start_btn = ctk.CTkButton(
            action_frame, text="Start MBB", 
            command=self.start_mbb,
            state="disabled", width=150, 
            fg_color="green",
            font=self._get_anuphan_font(size=16, weight="bold")
        )
        self.start_btn.pack(side="left", padx=5)

    def _create_check_section(self, parent, title: str, key: str):
        # Section header with icon
        header_frame = ctk.CTkFrame(parent, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        # Status icon (‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)
        self.status_icons[key] = ctk.CTkLabel(
            header_frame, text="‚è≥", 
            font=ctk.CTkFont(size=24),
            width=30
        )
        self.status_icons[key].pack(side="left", padx=(0, 5))
        # Title
        ctk.CTkLabel(
            header_frame, text=title, 
            font=self._get_anuphan_font(size=16, weight="bold"),
            anchor="w"
        ).pack(side="left", fill="x", expand=True)

        # Status text
        self.status_labels[f"{key}_status"] = ctk.CTkLabel(
            parent, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...",
            font=self._get_anuphan_font(size=14, weight="normal"), 
            text_color="gray",
            anchor="w"
        )
        self.status_labels[f"{key}_status"].pack(fill="x", padx=(40, 10), pady=(0, 5))

        # Details with larger font
        self.status_labels[f"{key}_details"] = ctk.CTkLabel(
            parent, text="", 
            font=self._get_anuphan_font(size=14, weight="normal"),
            anchor="w", justify="left", 
            text_color="#e0e0e0"
        )
        self.status_labels[f"{key}_details"].pack(fill="x", padx=(40, 10), pady=(0, 10))

        # Action button (only for API and System)
        if key != "data":
            self.action_buttons[key] = ctk.CTkButton(
                parent, text="Configure", 
                width=100, height=30, 
                state="disabled", 
                font=self._get_anuphan_font(size=14, weight="normal")
            )
            self.action_buttons[key].pack(padx=40, pady=(0, 10))
    def _update_status_icon(self, key: str, status: str):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        if self._is_destroyed:
            return
            
        icon_map = {
            "ready": "‚úÖ",
            "warning": "‚ö†Ô∏è", 
            "error": "‚ùå",
            "checking": "‚è≥"
        }
        
        color_map = {
            "ready": "#10b981",    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            "warning": "#f59e0b",  # ‡∏™‡πâ‡∏°
            "error": "#ef4444",    # ‡πÅ‡∏î‡∏á
            "checking": "#6b7280"  # ‡πÄ‡∏ó‡∏≤
        }
        
        icon = icon_map.get(status, "‚ùì")
        color = color_map.get(status, "#6b7280")
        
        self.status_icons[key].configure(text=icon, text_color=color)

    def run_all_checks(self):
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å auto start timer ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        if self.auto_start_timer:
            if self.auto_start_timer and not self._is_destroyed:
                self.root.after_cancel(self.auto_start_timer)
            self.auto_start_timer = None
            
        # ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á summary frame
        self.summary_frame.configure(fg_color=["gray90", "gray13"])
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        self.start_btn.configure(text="Start MBB")
        self.cancel_auto_btn.configure(state="disabled")
        
        thread = threading.Thread(target=self._run_checks_thread)
        thread.daemon = True
        thread.start()
    def _run_checks_thread(self):
        try:
            # Check API
            if not self._is_destroyed:
                self._update_status("api", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API...", "gray")
                self._safe_after(0, self._update_status_icon, "api", "checking")
                
            api_result = self.api_checker.check_all()
            self.check_results["api"] = api_result
            
            if not self._is_destroyed:
                self._safe_after(0, self._update_api_display, api_result)

            # Check System
            if not self._is_destroyed:
                self._update_status("system", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...", "gray")
                self._safe_after(0, self._update_status_icon, "system", "checking")
                
            system_result = self.system_checker.check_all()
            self.check_results["system"] = system_result
            
            if not self._is_destroyed:
                self._safe_after(0, self._update_system_display, system_result)

            # Check Data
            if not self._is_destroyed:
                self._update_status("data", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...", "gray")
                self._safe_after(0, self._update_status_icon, "data", "checking")
                
            data_result = self.data_checker.check_all()
            self.check_results["data"] = data_result
            
            if not self._is_destroyed:
                self._safe_after(0, self._update_data_display, data_result)

            # Update summary
            if not self._is_destroyed:
                self._safe_after(0, self._update_summary)
                
        except Exception:
            # Window destroyed or other error
            pass

    def _update_status(self, key: str, message: str, color: str):
        def update():
            try:
                if not self._is_destroyed and hasattr(self, 'status_labels') and f"{key}_status" in self.status_labels:
                    self.status_labels[f"{key}_status"].configure(
                        text=message, 
                        text_color=color
                    )
            except Exception:
                pass
        
        self._safe_after(0, update)
    def _update_api_display(self, result: dict):
        if self._is_destroyed:
            return
            
        status = result["status"]
        self._update_status_icon("api", status)
        
        status_text = {
            "ready": "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", 
            "warning": "‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", 
            "error": "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
        }.get(status, "Unknown")
        
        status_color = {
            "ready": "#10b981", 
            "warning": "#f59e0b", 
            "error": "#ef4444"
        }.get(status, "gray")
        
        self._update_status("api", status_text, status_color)
        
        details = result.get("details", {})
        detail_lines = []
        for api_name, api_info in details.items():
            if api_info.get("connected"):
                detail_lines.append(f"‚Ä¢ {api_name}: ‚úì ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                if api_info.get("quota"):
                    detail_lines.append(f"  ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤: {api_info['quota']}")
            else:
                detail_lines.append(f"‚Ä¢ {api_name}: ‚úó {api_info.get('error', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤')}")
        
        self.status_labels["api_details"].configure(text="\n".join(detail_lines))
        
        # Enable action button if there are issues
        if status in ["warning", "error"]:
            self.action_buttons["api"].configure(state="normal", command=self.open_model_config)
    def _update_system_display(self, result: dict):
        if self._is_destroyed:
            return
            
        status = result["status"]
        self._update_status_icon("system", status)
        
        status_text = {
            "ready": "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", 
            "warning": "‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", 
            "error": "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
        }.get(status, "Unknown")
        
        status_color = {
            "ready": "#10b981", 
            "warning": "#f59e0b", 
            "error": "#ef4444"
        }.get(status, "gray")
        
        self._update_status("system", status_text, status_color)
        
        details = result.get("details", {})
        detail_lines = []
        
        screen_info = details.get("screen", {})
        if screen_info:
            current_res = screen_info.get('current_resolution', 'Unknown')
            saved_res = screen_info.get('saved_resolution', 'Not configured')
            scale_pct = screen_info.get('scale_percentage', 100)
            
            detail_lines.append(f"‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {current_res}")
            
            if screen_info.get("resolution_mismatch"):
                if saved_res == "Not configured":
                    detail_lines.append("  ‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
                else:
                    detail_lines.append(f"  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {saved_res}")
            else:
                detail_lines.append(f"  ‚úì ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
            if screen_info.get("scale_warning"):
                detail_lines.append(f"‚Ä¢ Scale: {scale_pct}% ‚ùå")
                detail_lines.append("  ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Display Scale ‡πÄ‡∏õ‡πá‡∏ô 100%")
            else:
                detail_lines.append(f"‚Ä¢ Scale: {scale_pct}% ‚úì")
        
        gpu_info = details.get("gpu", {})
        if gpu_info:
            detail_lines.append(f"‚Ä¢ GPU: {gpu_info.get('message', 'Unknown')}")
            
        memory_info = details.get("memory", {})
        if memory_info:
            detail_lines.append(f"‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: {memory_info.get('available', 'Unknown')}")
        
        self.status_labels["system_details"].configure(text="\n".join(detail_lines))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Fix Resolution ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if screen_info.get("resolution_mismatch"):
            self.action_buttons["system"].configure(
                state="normal", 
                text="Fix Resolution",
                command=self.fix_resolution_settings
            )
        else:
            self.action_buttons["system"].configure(
                state="disabled", 
                text="Fix Resolution"
            )
    def _update_data_display(self, result: dict):
        if self._is_destroyed:
            return
            
        status = result["status"]
        self._update_status_icon("data", status)
        
        status_text = {
            "ready": "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", 
            "warning": "‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", 
            "error": "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
        }.get(status, "Unknown")
        
        status_color = {
            "ready": "#10b981", 
            "warning": "#f59e0b", 
            "error": "#ef4444"
        }.get(status, "gray")
        
        self._update_status("data", status_text, status_color)
        
        details = result.get("details", {})
        detail_lines = []
        
        # NPC.json
        npc_info = details.get("npc_json", {})
        if npc_info.get("valid"):
            summary = npc_info.get("summary", "")
            detail_lines.append(f"‚Ä¢ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• NPC: ‚úì ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            detail_lines.append(f"  {summary}")
        else:
            detail_lines.append(f"‚Ä¢ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• NPC: ‚úó {npc_info.get('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå')}")
        
        # Settings
        settings_info = details.get("settings", {})
        if settings_info.get("valid"):
            detail_lines.append("‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: ‚úì ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            detail_lines.append("‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: ‚úó ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        # OCR Models
        models_info = details.get("models", {})
        if models_info.get("downloaded"):
            detail_lines.append("‚Ä¢ OCR Models: ‚úì ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            detail_lines.append("‚Ä¢ OCR Models: ‚ö†Ô∏è ‡∏à‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")
        
        self.status_labels["data_details"].configure(text="\n".join(detail_lines))

    def _update_summary(self):
        if self._is_destroyed:
            return
            
        error_count = sum(1 for r in self.check_results.values() if r.get("status") == "error")
        warning_count = sum(1 for r in self.check_results.values() if r.get("status") == "warning")

        # ‡∏´‡∏¢‡∏∏‡∏î auto start timer ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if self.auto_start_timer:
            if self.auto_start_timer and not self._is_destroyed:
                self.root.after_cancel(self.auto_start_timer)
            self.auto_start_timer = None

        if error_count > 0:
            self.summary_label.configure(
                text=f"‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ {error_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", 
                text_color="#ef4444", 
                font=self._get_anuphan_font(size=18, weight="bold")
            )
            self.can_start = False
            self.start_btn.configure(state="disabled")
        elif warning_count > 0:
            self.summary_label.configure(
                text=f"‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {warning_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ)", 
                text_color="#f59e0b", 
                font=self._get_anuphan_font(size=18, weight="bold")
            )
            self.can_start = True
            self.start_btn.configure(state="normal")
        else:
            # ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            self._show_success_message()
            self.can_start = True
            self.start_btn.configure(state="normal")
    def _show_success_message(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡πÜ ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° countdown"""
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á summary frame
        self.summary_frame.configure(fg_color="#065f46")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        self.summary_label.configure(
            text="üéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!", 
            text_color="#34d399",  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏ß‡πà‡∏≤‡∏á
            font=self._get_anuphan_font(size=20, weight="bold")
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° countdown
        self.auto_start_countdown = 5
        self._start_auto_countdown()

    def _start_auto_countdown(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡∏¥‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if self._is_destroyed:
            return
            
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏° Cancel Auto Start
        self.cancel_auto_btn.configure(state="normal")
        
        if self.auto_start_countdown > 0:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° countdown
            countdown_text = (
                f"üéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!\n"
                f"‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏±‡∏ï‡∏¥‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô {self.auto_start_countdown} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ..."
            )
            self.summary_label.configure(
                text=countdown_text,
                font=self._get_anuphan_font(size=18, weight="bold")
            )
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Start
            self.start_btn.configure(text=f"Start Now ({self.auto_start_countdown})")
            
            self.auto_start_countdown -= 1
            self.auto_start_timer = self._safe_after(1000, self._start_auto_countdown)
        else:
            # ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î - ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
            self._auto_start_program()
    def cancel_auto_start(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡∏¥‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if self.auto_start_timer:
            if self.auto_start_timer and not self._is_destroyed:
                self.root.after_cancel(self.auto_start_timer)
            self.auto_start_timer = None
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á summary frame
        self.summary_frame.configure(fg_color=["gray90", "gray13"])
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        self.summary_label.configure(
            text="‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡∏¥‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß)",
            text_color="#10b981",
            font=self._get_anuphan_font(size=16, weight="normal")
        )
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        self.start_btn.configure(text="Start MBB")
        self.cancel_auto_btn.configure(state="disabled")

    def _auto_start_program(self):
        """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏±‡∏ï‡∏¥‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if self._is_destroyed:
            return
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        self.summary_label.configure(
            text="üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° MBB...",
            text_color="#60a5fa",  # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏ß‡πà‡∏≤‡∏á
            font=self._get_anuphan_font(size=18, weight="bold")
        )
        
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏°
        self.start_btn.configure(text="Starting...", state="disabled")
        self.cancel_auto_btn.configure(state="disabled")
        
        # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self._safe_after(1000, self.start_mbb)
    def open_model_config(self):
        """‡πÄ‡∏õ‡∏¥‡∏î API Configuration"""
        try:
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ simple_model_config.py ‡∏Å‡πà‡∏≠‡∏ô
            simple_config_path = os.path.join(project_root, "simple_model_config.py")
            if os.path.exists(simple_config_path):
                subprocess.Popen([sys.executable, simple_config_path], cwd=project_root)
                messagebox.showinfo("Info", "‡πÄ‡∏õ‡∏¥‡∏î API Configuration ‡πÅ‡∏•‡πâ‡∏ß")
                return
            
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ batch file
            if os.name == 'nt':
                bat_path = os.path.join(project_root, "model_config.bat")
                if os.path.exists(bat_path):
                    subprocess.Popen([bat_path], cwd=project_root, shell=True)
                    messagebox.showinfo("Info", "‡πÄ‡∏õ‡∏¥‡∏î Model Configuration ‡πÅ‡∏•‡πâ‡∏ß")
                    return
            
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ model_launcher.py
            launcher_path = os.path.join(project_root, "model_launcher.py")
            if os.path.exists(launcher_path):
                subprocess.Popen([sys.executable, launcher_path], cwd=project_root)
                messagebox.showinfo("Info", "‡πÄ‡∏õ‡∏¥‡∏î Model Configuration ‡πÅ‡∏•‡πâ‡∏ß")
                return
            
            # ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î model.py ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            model_path = os.path.join(project_root, "model.py")
            subprocess.Popen([sys.executable, model_path], cwd=project_root, shell=True)
            messagebox.showinfo("Info", "‡πÄ‡∏õ‡∏¥‡∏î Model Configuration ‡πÅ‡∏•‡πâ‡∏ß")
            
        except Exception as e:
            messagebox.showerror("Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Model Configuration ‡πÑ‡∏î‡πâ: {str(e)}")
    def fix_resolution_settings(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ resolution ‡πÉ‡∏ô settings.json"""
        try:
            success = self.system_checker.fix_resolution_settings()
            
            if success:
                messagebox.showinfo("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
                    "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n"
                    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï action button
                self.action_buttons["system"].configure(state="disabled", text="Fix Resolution")
                
                # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                thread = threading.Thread(target=self._run_single_check, args=("system",))
                thread.daemon = True
                thread.start()
            else:
                messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                    "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ\n"
                    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á")
                
        except Exception as e:
            messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

    def _run_single_check(self, check_type: str):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô"""
        if check_type == "system":
            self._update_status("system", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...", "gray")
            self._update_status_icon("system", "checking")
            result = self.system_checker.check_all()
            self.check_results["system"] = result
            self._safe_after(0, self._update_system_display, result)
            self._safe_after(0, self._update_summary)
    def start_mbb(self):
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å auto start timer ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        if self.auto_start_timer:
            if self.auto_start_timer and not self._is_destroyed:
                self.root.after_cancel(self.auto_start_timer)
            self.auto_start_timer = None
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å preference
        self._save_skip_preference()
        
        # Set destroyed flag before destroying
        self._is_destroyed = True
        self.root.destroy()

    def run(self):
        self.root.mainloop()
        return {
            "can_start": self.can_start or self.force_start,
            "force_start": self.force_start,
            "check_results": self.check_results,
        }


if __name__ == "__main__":
    checker = BeforeStartUI()
    result = checker.run()
    
    if result["can_start"]:
        print("Starting MBB...")
        try:
            import sys
            import os
            
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏±‡∏ô MBB.py ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ import ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            mbb_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "MBB.py")
            if os.path.exists(mbb_path):
                import subprocess
                subprocess.run([sys.executable, mbb_path])
            else:
                # Fallback: import ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á app
                sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                from MBB import MagicBabelApp
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á tkinter root ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MBB
                import tkinter as tk
                mbb_root = tk.Tk()
                app = MagicBabelApp(mbb_root)
                app.mainloop()
        except ImportError:
            print("MBB module not found. Please run from project root.")
        except Exception as e:
            print(f"Error starting MBB: {e}")
    else:
        print("System check failed or cancelled by user")