import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
import logging
from PIL import Image, ImageTk
from translator_factory import TranslatorFactory
from appearance import appearance_manager
from asset_manager import AssetManager
from advance_ui import AdvanceUI
from simplified_hotkey_ui import SimplifiedHotkeyUI  # import ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
from font_manager import FontUI, initialize_font_manager, FontUIManager
from version_manager import get_settings_version  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô
from utils_appearance import (
    SettingsUITheme,
    ModernButton,
    ModernEntry,
    ModernFrame,
)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡πÉ‡∏´‡∏°‡πà

# ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ monitor position
try:
    import win32api
    import win32con

    HAS_WIN32 = True
except ImportError:
    HAS_WIN32 = False
    print("Warning: win32api not available, using fallback positioning for Settings UI")


def is_valid_hotkey(hotkey):
    hotkey = hotkey.lower()
    valid_keys = set("abcdefghijklmnopqrstuvwxyz0123456789")
    valid_functions = set(
        ["f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", "f11", "f12"]
    )
    valid_modifiers = set(["ctrl", "alt", "shift"])

    parts = hotkey.split("+")

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà key ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if len(parts) == 1:
        return parts[0] in valid_keys or parts[0] in valid_functions

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ modifier ‡πÅ‡∏•‡∏∞ key
    if len(parts) > 1:
        modifiers = parts[:-1]
        key = parts[-1]
        return all(mod in valid_modifiers for mod in modifiers) and (
            key in valid_keys or key in valid_functions
        )

    return False


# ==================================================================
# ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ HotkeyUI ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (HotkeyUI ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
# ==================================================================


class Settings:
    VALID_MODELS = {
        "gemini-2.0-flash-lite": {
            "display_name": "gemini-2.0-flash-lite",
            "type": "gemini",
        },
        "gemini-2.0-flash": {
            "display_name": "gemini-2.0-flash",
            "type": "gemini",
        },
        "gemini-2.5-flash": {
            "display_name": "gemini-2.5-flash",
            "type": "gemini",
        },
    }

    DEFAULT_API_PARAMETERS = {
        # Main parameters for the model
        "model": "gemini-2.0-flash",
        "displayed_model": "gemini-2.0-flash",
        "max_tokens": 500,
        "temperature": 0.8,
        "top_p": 0.9,
        # Additional OCR settings for multiple languages
        "ocr_settings": {
            "languages": ["en", "ja"],
            "confidence_threshold": 0.65,
            "image_preprocessing": {
                "resize_factor": 2.0,
                "contrast": 1.5,
                "sharpness": 1.3,
                "threshold": 128,
            },
        },
        # Translation settings
        "translation_settings": {
            "source_languages": ["en", "ja"],
            "target_language": "th",
            "preserve_names": True,
            "modern_style": True,
            "flirty_tone": True,
            "use_emojis": True,
        },
        # FIX: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô
        "special_chars": {
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (‡∏Æ‡∏¥‡∏£‡∏≤‡∏á‡∏≤‡∏ô‡∏∞, ‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏∞, ‡∏Ñ‡∏±‡∏ô‡∏à‡∏¥)
            "japanese_range": [
                "\u3040-\u309f",  # Hiragana
                "\u30a0-\u30ff",  # Katakana
                "\u4e00-\u9faf",  # CJK Unified Ideographs (Common Kanji)
                "\uff00-\uffef",  # Full-width Roman and half-width Katakana
            ],
            # ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            "thai_range": ["\u0e00-\u0e7f"],
            # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
            "allowed_symbols": ["...", "‚Äî", "!", "?", "üíï", "‚ú®", "ü•∫", "üòè"],
        },
    }

    def __init__(self):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á field ‡πÉ‡∏´‡∏°‡πà
        self.default_settings = {
            "api_parameters": self.DEFAULT_API_PARAMETERS.copy(),
            "font_size": 24,
            "font": "IBM Plex Sans Thai Medium.ttf",  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "line_spacing": -50,  # ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö line spacing
            "width": 960,
            "height": 240,
            "enable_force_translate": True,
            "enable_auto_hide": True,
            "enable_ui_toggle": True,  # ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ
            "enable_click_translate": False,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Click Translate ‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô False
            "splash_screen_type": "video",  # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: "image", "video", "off"
            "bg_color": appearance_manager.bg_color,  # ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å appearance_manager
            "translate_areas": {  # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                "A": {"start_x": 0, "start_y": 0, "end_x": 0, "end_y": 0},
                "B": {"start_x": 0, "start_y": 0, "end_x": 0, "end_y": 0},
                "C": {"start_x": 0, "start_y": 0, "end_x": 0, "end_y": 0},
            },
            "current_area": "A+B",  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "current_preset": 1,  # preset ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "last_manual_preset_selection_time": 0,  # *** ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ ***
            "display_scale": None,
            "use_gpu_for_ocr": False,
            "screen_size": "2560x1440",  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "shortcuts": {  # ‡∏Ñ‡πà‡∏≤ default shortcuts
                "toggle_ui": "alt+l",
                "start_stop_translate": "f9",
                "force_translate": "r-click",
                "force_translate_key": "f10",  # ‡πÉ‡∏´‡∏°‡πà: hotkey ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force translate
            },
            "logs_ui": {  # ‡∏Ñ‡πà‡∏≤ default logs UI
                "width": 480,
                "height": 320,
                "font_size": 16,
                "visible": True,
            },
            "buffer_settings": {  # ‡∏Ñ‡πà‡∏≤ default buffer settings
                "cache_timeout": 300,
                "max_cache_size": 100,
                "similarity_threshold": 0.85,
            },
            "logs_settings": {  # ‡∏Ñ‡πà‡∏≤ default logs settings
                "enable_dual_logs": True,
                "translation_only_logs": True,
                "logs_path": "logs",
                "clean_logs_after_days": 7,
            },
            "area_presets": [],  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô list ‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ ensure_default_values ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            "custom_themes": {},  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô custom themes ‡∏ß‡πà‡∏≤‡∏á
            "theme": "Theme4",  # ‡∏ò‡∏µ‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "show_starter_guide": True,  # ‡πÅ‡∏™‡∏î‡∏á guide ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
            "cpu_limit": 80,  # ‡∏Ñ‡πà‡∏≤ default CPU limit
            "enable_hover_translation": False,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ "enable_hover_translation" ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå settings.py
            "hover_preset_settings": {  # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î hover ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preset ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
                1: True, 2: True, 3: True, 4: False, 5: False, 6: False
            },
            "ui_positions": {  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á UI
                "main_ui": "",  # ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                "mini_ui": "",
                "translated_ui": "",
                "control_ui": "",
                "logs_ui": "",
                "monitor_info": {
                    "primary": "",  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å format: "WxH+X+Y"
                    "all_monitors": [],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î format: [{"w": width, "h": height, "x": pos_x, "y": pos_y}]
                },
            },
        }
        self.settings = {}  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô settings ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏ß‡πà‡∏≤‡∏á
        self.load_settings()  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)

        # --- FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î ---
        settings_corrected = False
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á settings
            if "api_parameters" in self.settings and isinstance(
                self.settings["api_parameters"], dict
            ):
                if "ocr_settings" in self.settings["api_parameters"] and isinstance(
                    self.settings["api_parameters"]["ocr_settings"], dict
                ):
                    if "languages" in self.settings["api_parameters"]["ocr_settings"]:
                        current_langs = self.settings["api_parameters"]["ocr_settings"][
                            "languages"
                        ]
                        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ "ko" ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô "ja" ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                        if "ko" in current_langs:
                            logging.warning(
                                "CORRECTING 'ko' to 'ja' in loaded OCR settings."
                            )
                            new_langs = [
                                lang if lang != "ko" else "ja" for lang in current_langs
                            ]
                            self.settings["api_parameters"]["ocr_settings"][
                                "languages"
                            ] = new_langs
                            settings_corrected = True

                # ‡∏ó‡∏≥‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö translation_settings
                if "translation_settings" in self.settings[
                    "api_parameters"
                ] and isinstance(
                    self.settings["api_parameters"]["translation_settings"], dict
                ):
                    if (
                        "source_languages"
                        in self.settings["api_parameters"]["translation_settings"]
                    ):
                        current_src_langs = self.settings["api_parameters"][
                            "translation_settings"
                        ]["source_languages"]
                        if "ko" in current_src_langs:
                            logging.warning(
                                "CORRECTING 'ko' to 'ja' in loaded translation settings."
                            )
                            new_src_langs = [
                                lang if lang != "ko" else "ja"
                                for lang in current_src_langs
                            ]
                            self.settings["api_parameters"]["translation_settings"][
                                "source_languages"
                            ] = new_src_langs
                            settings_corrected = True
        except Exception as e:
            logging.error(f"Error during settings sanitization: {e}")
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à ---

        self.ensure_default_values()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ default ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå settings.json ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if settings_corrected:
            logging.info("Saving corrected settings back to settings.json.")
            self.save_settings()

    def validate_model_parameters(self, params):
        """Validate the given parameters."""
        if not isinstance(params, dict):
            raise ValueError("Parameters must be a dictionary")

        # Check for valid model
        if "model" in params:
            if params["model"] not in self.VALID_MODELS:
                valid_models = list(self.VALID_MODELS.keys())
                raise ValueError(f"Invalid model. Must be one of: {valid_models}")

        # Validate numeric values
        if "max_tokens" in params:
            max_tokens = int(params["max_tokens"])
            if not (100 <= max_tokens <= 2000):
                raise ValueError("max_tokens must be between 100 and 2000")

        if "temperature" in params:
            temp = float(params["temperature"])
            if not (0.1 <= temp <= 1.0):
                raise ValueError("temperature must be between 0.1 and 1.0")

        return True

    def get_display_scale(self):
        """Return the stored display scale or None if not set."""
        return self.settings.get("display_scale")

    def set_display_scale(self, scale):
        """Save the display scale if valid."""
        try:
            scale = float(scale)
            if 0.5 <= scale <= 3.0:
                self.settings["display_scale"] = scale
                self.save_settings()
                print(f"Display scale saved: {int(scale * 100)}%")
                return True
            else:
                print(f"Invalid scale value: {scale}")
                return False
        except Exception as e:
            print(f"Error saving display scale: {e}")
            return False

    def validate_display_scale(self, scale):
        """Validate the display scale value."""
        try:
            scale = float(scale)
            if 0.5 <= scale <= 3.0:
                return {
                    "is_valid": True,
                    "message": "Valid scale value",
                    "value": scale,
                }
            return {
                "is_valid": False,
                "message": f"Scale must be between 50% and 300%, got {int(scale * 100)}%",
                "value": None,
            }
        except (ValueError, TypeError):
            return {
                "is_valid": False,
                "message": "Invalid scale value type",
                "value": None,
            }

    def set_bg_color(self, color):
        """Set and save the background color."""
        self.settings["bg_color"] = color
        self.save_settings()
        appearance_manager.update_bg_color(color)

    def get(self, key, default=None):
        if key == "bg_color":
            return self.settings.get("bg_color", appearance_manager.bg_color)
        return self.settings.get(key, default)

    def set(self, key, value):
        self.settings[key] = value
        self.save_settings()

    def load_settings(self):
        try:
            with open("settings.json", "r") as f:
                self.settings = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.settings = {}  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å dict ‡∏ß‡πà‡∏≤‡∏á

    def save_settings(self):
        """Save all current settings to file."""
        try:
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API parameters
            if "api_parameters" in self.settings:
                api_params = self.settings["api_parameters"]
                if "temperature" in api_params:
                    api_params["temperature"] = round(
                        float(api_params["temperature"]), 2
                    )
                if "top_p" in api_params:
                    api_params["top_p"] = round(float(api_params["top_p"]), 2)

            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ current_area
            if "current_area" in self.settings:
                current_areas = self.settings["current_area"]
                if isinstance(current_areas, list):
                    self.settings["current_area"] = "+".join(current_areas)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ area_presets
            if "area_presets" not in self.settings:
                self.settings["area_presets"] = [
                    {"name": "Preset 1", "areas": "A+B"},
                    {"name": "Preset 2", "areas": "C"},
                    {"name": "Preset 3", "areas": "A"},
                    {"name": "Preset 4", "areas": "B"},
                    {"name": "Preset 5", "areas": "A+B+C"},
                ]

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
            with open("settings.json", "w") as f:
                json.dump(self.settings, f, indent=4)

        except Exception as e:
            logging.error(f"Error saving settings: {e}")
            raise

    def ensure_default_values(self):
        """Add default values if missing and ensure preset structure."""
        changes_made = False  # Flag ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å key ‡πÉ‡∏ô default_settings
        for key, default_value in self.default_settings.items():
            if key not in self.settings:
                # ‡∏ñ‡πâ‡∏≤ key ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô settings ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
                self.settings[key] = default_value
                changes_made = True
                logging.info(f"Added missing setting '{key}' with default value.")
            # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô dicts) ---
            elif key == "api_parameters":
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ key ‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô api_parameters ‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if not isinstance(self.settings[key], dict):
                    self.settings[key] = self.default_settings[key].copy()
                    changes_made = True
                else:
                    for sub_key, sub_default in self.default_settings[key].items():
                        if sub_key not in self.settings[key]:
                            self.settings[key][sub_key] = sub_default
                            changes_made = True
                            logging.info(f"Added missing api_parameter '{sub_key}'.")
                        # ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö type ‡∏Ç‡∏≠‡∏á sub_key ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
            elif key == "translate_areas":
                if not isinstance(self.settings[key], dict):
                    self.settings[key] = self.default_settings[key].copy()
                    changes_made = True
                else:
                    for area in ["A", "B", "C"]:
                        if area not in self.settings[key] or not isinstance(
                            self.settings[key].get(area), dict
                        ):
                            self.settings[key][area] = {
                                "start_x": 0,
                                "start_y": 0,
                                "end_x": 0,
                                "end_y": 0,
                            }
                            changes_made = True
                            logging.info(
                                f"Added/Reset missing translate_area '{area}' - no coordinates set yet."
                            )
            elif key == "shortcuts":
                if not isinstance(self.settings[key], dict):
                    self.settings[key] = self.default_settings[key].copy()
                    changes_made = True
                else:
                    for action, default_hotkey in self.default_settings[key].items():
                        if action not in self.settings[key]:
                            self.settings[key][action] = default_hotkey
                            changes_made = True
                            logging.info(f"Added missing shortcut '{action}'.")
            elif key == "logs_ui":  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö key ‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á logs_ui
                if not isinstance(self.settings[key], dict):
                    self.settings[key] = self.default_settings[key].copy()
                    changes_made = True
                else:
                    for sub_key, sub_default in self.default_settings[key].items():
                        if sub_key not in self.settings[key]:
                            self.settings[key][sub_key] = sub_default
                            changes_made = True
                            logging.info(f"Added missing logs_ui setting '{sub_key}'.")
            # --- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ---

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ area_presets ---
        # *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preset 6 ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô 6 ***
        default_presets_structure = [
            {"name": "dialog", "role": "dialog", "areas": "A+B", "coordinates": {}},
            {"name": "lore", "role": "lore", "areas": "C", "coordinates": {}},
            {"name": "choice", "role": "choice", "areas": "A+B", "coordinates": {}},
            {"name": "Preset 4", "role": "custom", "areas": "B", "coordinates": {}},
            {"name": "Preset 5", "role": "custom", "areas": "A+B+C", "coordinates": {}},
            {
                "name": "Preset 6",
                "role": "custom",
                "areas": "A+C",
                "coordinates": {},
            },  # ‡πÄ‡∏û‡∏¥‡πà‡∏° preset 6
        ]
        presets_changed_flag = False  # ‡πÉ‡∏ä‡πâ flag ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preset ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö area_presets ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á ensure ‡∏Ñ‡πà‡∏≤ default ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        current_presets = self.settings.get("area_presets", [])
        if (
            not isinstance(current_presets, list) or len(current_presets) != 6
        ):  # ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô 6
            logging.warning(
                "Area presets missing or invalid length. Recreating defaults with 6 presets."
            )
            # ‡πÄ‡∏Å‡πá‡∏ö custom names ‡∏Ç‡∏≠‡∏á 4, 5, 6 (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            custom_names = {}
            if isinstance(current_presets, list):
                for i, p in enumerate(current_presets):
                    preset_num = i + 1
                    if (
                        isinstance(p, dict) and preset_num >= 4
                    ):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö preset 4, 5, 6, ...
                        if "custom_name" in p and p["custom_name"]:
                            custom_names[preset_num] = p["custom_name"]

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á default structure ‡πÉ‡∏´‡∏°‡πà
            new_presets = [p.copy() for p in default_presets_structure]  # ‡πÉ‡∏ä‡πâ copy()

            # ‡πÉ‡∏™‡πà custom names ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            for preset_num, name in custom_names.items():
                if 1 <= preset_num <= len(new_presets):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á new_presets
                    new_presets[preset_num - 1]["custom_name"] = name
                    logging.info(
                        f"Restored custom name '{name}' for preset {preset_num} during recreation."
                    )

            self.settings["area_presets"] = new_presets
            presets_changed_flag = True
            if "current_preset" not in self.settings or not (
                1 <= self.settings.get("current_preset", 1) <= 6
            ):  # ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô 6
                self.settings["current_preset"] = 1  # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        else:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ preset ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 6 ‡∏ï‡∏±‡∏ß
            for i in range(6):  # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ 6 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                preset = current_presets[i]
                preset_num = i + 1
                default_struct = default_presets_structure[i]
                changed_this_preset = False
                existing_custom_name = None

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö type ‡∏Ç‡∏≠‡∏á preset ‡πÄ‡∏≠‡∏á
                if not isinstance(preset, dict):
                    if (
                        isinstance(current_presets[i], dict)
                        and "custom_name" in current_presets[i]
                    ):
                        existing_custom_name = current_presets[i]["custom_name"]
                    current_presets[i] = default_struct.copy()  # ‡πÉ‡∏ä‡πâ copy()
                    preset = current_presets[i]  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ preset ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà dict ‡πÉ‡∏´‡∏°‡πà
                    if existing_custom_name and preset_num >= 4:
                        preset["custom_name"] = existing_custom_name
                    presets_changed_flag = True
                    logging.info(f"Preset {preset_num} recreated due to invalid type.")
                else:
                    # ‡πÄ‡∏Å‡πá‡∏ö custom name ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ)
                    if "custom_name" in preset:
                        existing_custom_name = preset["custom_name"]

                # ‡∏ï‡∏£‡∏ß‡∏à/‡πÄ‡∏û‡∏¥‡πà‡∏° 'role'
                expected_role = default_struct["role"]
                if preset.get("role") != expected_role:
                    preset["role"] = expected_role
                    changed_this_preset = True
                # ‡∏ï‡∏£‡∏ß‡∏à/‡πÄ‡∏û‡∏¥‡πà‡∏° 'name' (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠ default, custom_name ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å)
                expected_name = default_struct["name"]
                if preset.get("name") != expected_name:
                    preset["name"] = expected_name
                    changed_this_preset = True
                # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Preset 1, 2, 3 areas ‡πÅ‡∏•‡∏∞ Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                if preset_num == 1 and preset.get("areas") != "A+B":
                    preset["areas"] = "A+B"
                    changed_this_preset = True
                    logging.info("Forcing Preset 1 areas to A+B")
                elif preset_num == 2 and preset.get("areas") != "C":
                    preset["areas"] = "C"
                    changed_this_preset = True
                    logging.info("Forcing Preset 2 areas to C")
                elif preset_num == 3 and preset.get("areas") != "A+B":
                    preset["areas"] = "A+B"
                    changed_this_preset = True
                    logging.info("Forcing Preset 3 areas to A+B")
                # ‡∏ï‡∏£‡∏ß‡∏à/‡πÄ‡∏û‡∏¥‡πà‡∏° coordinates
                if "coordinates" not in preset or not isinstance(
                    preset.get("coordinates"), dict
                ):
                    preset["coordinates"] = {}
                    changed_this_preset = True

                # ‡∏£‡∏±‡∏Å‡∏©‡∏≤/‡∏•‡∏ö custom_name ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preset 4-6
                if preset_num >= 4:
                    if existing_custom_name:
                        if (
                            "custom_name" not in preset
                            or preset.get("custom_name") != existing_custom_name
                        ):
                            preset["custom_name"] = existing_custom_name
                            # ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà custom name ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡∏ü‡∏ã‡πâ‡∏≥ ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                            logging.debug(
                                f"Corrected/Preserved custom name '{existing_custom_name}' for preset {preset_num}."
                            )
                    elif "custom_name" in preset:
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ existing_custom_name ‡πÅ‡∏ï‡πà‡πÉ‡∏ô dict ‡∏°‡∏µ key ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
                        del preset["custom_name"]
                        changed_this_preset = True
                        logging.info(
                            f"Removed empty/invalid custom_name field from preset {preset_num}."
                        )

                if changed_this_preset:
                    presets_changed_flag = True
                    logging.info(f"Preset {preset_num} structure updated/corrected.")

        # ‡∏ï‡∏£‡∏ß‡∏à current_preset ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏•‡∏±‡∏á area_presets ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ len() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
        num_presets = len(self.settings.get("area_presets", []))
        if not (
            1 <= self.settings.get("current_preset", 1) <= num_presets
        ):  # ‡πÉ‡∏ä‡πâ num_presets ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            logging.warning(
                f"Invalid current_preset found ({self.settings.get('current_preset')}). Resetting to 1."
            )
            self.settings["current_preset"] = 1
            presets_changed_flag = True  # ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô area_presets ---

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if changes_made or presets_changed_flag or not os.path.exists("settings.json"):
            logging.info(
                "Saving settings due to missing values or preset structure changes."
            )
            self.save_settings()

    def get_preset(self, preset_number):
        """‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ preset ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç"""
        presets = self.settings.get("area_presets", [])
        if 1 <= preset_number <= len(presets):
            return presets[preset_number - 1]
        return None

    def get_preset_role(self, preset_number):
        """‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ role ‡∏Ç‡∏≠‡∏á preset ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç"""
        preset_data = self.get_preset(preset_number)
        if preset_data:
            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ role ‡∏à‡∏≤‡∏Å preset_data ‡∏´‡∏£‡∏∑‡∏≠ fallback ‡πÄ‡∏õ‡πá‡∏ô 'custom' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            return preset_data.get("role", "custom")
        # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ preset ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô custom (‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô None ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£)
        logging.warning(
            f"Preset {preset_number} not found when getting role, assuming 'custom'."
        )
        return "custom"

    def get_preset_areas_list(self, preset_number):
        """‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ areas ‡∏Ç‡∏≠‡∏á preset ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö list

        Args:
            preset_number (int): ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset (1-6)

        Returns:
            list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ areas ‡πÄ‡∏ä‡πà‡∏ô ["A", "B"] ‡∏´‡∏£‡∏∑‡∏≠ ["A+B"] ‡∏´‡∏£‡∏∑‡∏≠ [] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        """
        preset_data = self.get_preset(preset_number)
        if preset_data and "areas" in preset_data:
            areas_str = preset_data["areas"]
            if areas_str:
                # ‡πÅ‡∏¢‡∏Å areas ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô "A+B" ‡∏´‡∏£‡∏∑‡∏≠ "A" ‡∏´‡∏£‡∏∑‡∏≠ "B"
                if "+" in areas_str:
                    return areas_str.split("+")
                else:
                    return [areas_str]
        return []

    def get_preset_display_name(self, preset_number):
        """‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ name (‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á) ‡∏Ç‡∏≠‡∏á preset ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç

        ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô:
        - preset 1 = "dialog"
        - preset 2 = "lore"
        - preset 3 = "Ex-choice"
        - preset 4 = "Preset 4" (‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)
        - preset 5 = "Preset 5" (‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)
        """
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preset 1-3
        if preset_number == 1:
            return "dialog"
        elif preset_number == 2:
            return "lore"
        elif preset_number == 3:
            return "Ex-choice"
        elif preset_number in [4, 5, 6]:  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÄ‡∏û‡∏¥‡πà‡∏° 6 ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô list
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preset 4-6 ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ custom ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            preset_data = self.get_preset(preset_number)
            if (
                preset_data
                and "custom_name" in preset_data
                and preset_data["custom_name"]
            ):
                return preset_data["custom_name"]
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ custom ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "Preset 4", "Preset 5", "Preset 6")
            return f"Preset {preset_number}"
        else:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 1-6 (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤)
            logging.error(f"Invalid preset number requested: {preset_number}")
            return f"Unknown Preset {preset_number}"

    def set_preset_custom_name(self, preset_number, custom_name):
        """‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ custom ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö preset

        Args:
            preset_number (int): ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset (1-6)
            custom_name (str): ‡∏ä‡∏∑‡πà‡∏≠ custom ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á
        """
        try:
            if not (1 <= preset_number <= 6):  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 6
                logging.error(f"Invalid preset number: {preset_number}")
                return False

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• presets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            presets = self.settings.get("area_presets", [])

            # ‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á preset ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            preset_index = preset_number - 1

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ index ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if 0 <= preset_index < len(presets):
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠ custom
                presets[preset_index]["custom_name"] = custom_name
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å presets ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà settings
                self.settings["area_presets"] = presets
                # *** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å save_settings() ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ***
                self.save_settings()
                logging.info(
                    f"Set custom name for preset {preset_number} to '{custom_name}'"
                )
                return True
            else:
                logging.error(
                    f"Preset index {preset_index} out of bounds for preset {preset_number}"
                )
                return False

        except Exception as e:
            logging.error(f"Error setting custom name for preset {preset_number}: {e}")
            import traceback

            traceback.print_exc()
            return False

    def get_all_presets(self):
        """Return all preset data."""
        # Ensure the presets are loaded and potentially defaulted
        self.ensure_default_values()
        return self.settings.get("area_presets", [])

    def validate_coordinates(self, coordinates):
        """Validate the structure and values of coordinates data.

        Args:
            coordinates (dict): Dictionary containing area coordinates.
                                Expected format: {"A": {"start_x": ..., ...}, ...}

        Returns:
            bool: True if valid, False otherwise.
        """
        if not isinstance(coordinates, dict):
            logging.error("Invalid coordinates type: Expected dict")
            return False

        required_keys = {"start_x", "start_y", "end_x", "end_y"}

        for area, coords in coordinates.items():
            if area not in ["A", "B", "C"]:
                logging.error(f"Invalid area key in coordinates: {area}")
                return False

            if not isinstance(coords, dict):
                logging.error(
                    f"Invalid coordinates value type for area {area}: Expected dict"
                )
                return False

            if not required_keys.issubset(coords.keys()):
                logging.error(
                    f"Missing required keys in coordinates for area {area}. Expected: {required_keys}"
                )
                return False

            for key, value in coords.items():
                if key in required_keys and not isinstance(value, (int, float)):
                    logging.error(
                        f"Invalid coordinate value type for {key} in area {area}: Expected number, got {type(value)}"
                    )
                    return False

        return True

    def save_preset(self, preset_number, areas, coordinates):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preset (areas ‡πÅ‡∏•‡∏∞ coordinates)

        Args:
            preset_number (int): ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset (1-6)
            areas (str): ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "A+B"
            coordinates (dict): ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà

        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        try:
            if not (1 <= preset_number <= 6):
                logging.error(f"Invalid preset number: {preset_number}")
                return False

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á coordinates ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            if not self.validate_coordinates(coordinates):
                logging.error(
                    f"Invalid coordinates data provided for preset {preset_number}. Aborting save."
                )
                return False

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• presets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            presets = self.settings.get("area_presets", [])

            # ‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á preset ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            preset_index = preset_number - 1

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ index ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if 0 <= preset_index < len(presets):
                # *** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ***
                coords_copy = {}
                for area, coords in coordinates.items():
                    if isinstance(coords, dict) and all(
                        k in coords for k in ["start_x", "start_y", "end_x", "end_y"]
                    ):
                        coords_copy[area] = {
                            "start_x": coords["start_x"],
                            "start_y": coords["start_y"],
                            "end_x": coords["end_x"],
                            "end_y": coords["end_y"],
                        }

                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                presets[preset_index]["areas"] = areas
                presets[preset_index]["coordinates"] = coords_copy  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å presets ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà settings
                self.settings["area_presets"] = presets
                self.save_settings()

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏á log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                for area, coords in coords_copy.items():
                    logging.info(
                        f"Preset {preset_number} saved area {area} coordinates: {coords}"
                    )

                logging.info(
                    f"Successfully saved preset {preset_number}: areas='{areas}', with {len(coords_copy)} coordinate sets"
                )
                return True
            else:
                logging.error(
                    f"Preset index {preset_index} out of bounds for preset {preset_number}"
                )
                return False

        except Exception as e:
            logging.error(f"Error saving preset {preset_number}: {e}")
            import traceback

            traceback.print_exc()
            return False

    def set_cpu_limit(self, limit):
        """Set the CPU usage limit."""
        if "cpu_limit" in self.settings:
            self.settings["cpu_limit"] = limit
            self.save_settings()

    def get_current_preset(self):
        """‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ preset ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        Returns:
            int: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (1-5)
        """
        return self.settings.get("current_preset", 1)

    def get_logs_settings(self):
        """Return the settings for the logs UI."""
        # ‡∏£‡∏ß‡∏° settings ‡∏à‡∏≤‡∏Å logs_ui ‡πÅ‡∏•‡∏∞ ui_positions
        logs_ui = self.settings.get(
            "logs_ui", {"width": 480, "height": 320, "font_size": 16, "font_family": "Bai Jamjuree", "visible": True}
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á geometry ‡∏à‡∏≤‡∏Å ui_positions
        logs_position = self.settings.get("ui_positions", {}).get("logs_ui", "")
        if logs_position:
            # ‡πÅ‡∏õ‡∏•‡∏á geometry string ‡πÄ‡∏õ‡πá‡∏ô x, y
            try:
                # format: "widthxheight+x+y"
                if "+" in logs_position and "x" in logs_position:
                    size_part, pos_part = logs_position.split("+", 1)
                    if "x" in size_part:
                        width_str, height_str = size_part.split("x")
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï width, height ‡∏à‡∏≤‡∏Å position (‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏ß‡πà‡∏≤)
                        logs_ui["width"] = int(width_str)
                        logs_ui["height"] = int(height_str)

                    # ‡πÅ‡∏¢‡∏Å x, y
                    pos_parts = pos_part.split("+")
                    if len(pos_parts) >= 2:
                        logs_ui["x"] = int(pos_parts[0])
                        logs_ui["y"] = int(pos_parts[1])
                    elif "+" in pos_part:
                        # ‡∏Å‡∏£‡∏ì‡∏µ x ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö
                        x_str = (
                            pos_parts[0] if pos_parts[0] != "" else "-" + pos_parts[1]
                        )
                        y_str = pos_parts[-1]
                        logs_ui["x"] = int(x_str)
                        logs_ui["y"] = int(y_str)
            except (ValueError, IndexError) as e:
                logging.warning(
                    f"Failed to parse logs_ui position '{logs_position}': {e}"
                )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° transparency_mode ‡∏à‡∏≤‡∏Å settings ‡∏´‡∏•‡∏±‡∏Å
        logs_ui["transparency_mode"] = self.settings.get("logs_transparency_mode", "A")

        return logs_ui

    def set_logs_settings(
        self,
        width=None,
        height=None,
        font_size=None,
        font_family=None,
        visible=None,
        x=None,
        y=None,
        transparency_mode=None,
        logs_reverse_mode=None,
    ):
        """Update the logs UI settings."""
        if "logs_ui" not in self.settings:
            self.settings["logs_ui"] = {}

        if width is not None:
            self.settings["logs_ui"]["width"] = width
        if height is not None:
            self.settings["logs_ui"]["height"] = height
        if font_size is not None:
            self.settings["logs_ui"]["font_size"] = font_size
        if font_family is not None:
            self.settings["logs_ui"]["font_family"] = font_family
        if visible is not None:
            self.settings["logs_ui"]["visible"] = visible

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transparency_mode ‡πÅ‡∏•‡∏∞ logs_reverse_mode ‡∏•‡∏á‡πÉ‡∏ô settings ‡∏´‡∏•‡∏±‡∏Å
        if transparency_mode is not None:
            self.settings["logs_transparency_mode"] = transparency_mode
        if logs_reverse_mode is not None:
            self.settings["logs_reverse_mode"] = logs_reverse_mode

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å x, y ‡∏•‡∏á‡πÉ‡∏ô ui_positions
        if x is not None and y is not None and width is not None and height is not None:
            if "ui_positions" not in self.settings:
                self.settings["ui_positions"] = {}
            self.settings["ui_positions"]["logs_ui"] = f"{width}x{height}+{x}+{y}"

        self.save_settings()

    def clear_logs_position_cache(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå cache ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á logs UI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ smart positioning"""
        try:
            if (
                "ui_positions" in self.settings
                and "logs_ui" in self.settings["ui_positions"]
            ):
                del self.settings["ui_positions"]["logs_ui"]
                self.save_settings()
                print(
                    "Cleared logs UI position cache - will use smart positioning next time"
                )
                return True
        except Exception as e:
            print(f"Error clearing logs position cache: {e}")
        return False

    def get_shortcut(self, action, default=None):
        return self.settings.get("shortcuts", {}).get(action, default)

    def set_shortcut(self, action, shortcut):
        if "shortcuts" not in self.settings:
            self.settings["shortcuts"] = {}
        self.settings["shortcuts"][action] = shortcut
        self.save_settings()

    def set_screen_size(self, size):
        self.settings["screen_size"] = size
        self.save_settings()

    def set_gpu_for_ocr(self, use_gpu):
        self.settings["use_gpu_for_ocr"] = use_gpu
        self.save_settings()
        current_mode = "GPU" if use_gpu else "CPU"
        logging.info(f"Switched OCR to [{current_mode}]")
        print(f"Switched OCR to [{current_mode}]")

    def set_current_area(self, area):
        self.settings["current_area"] = area
        self.save_settings()

    def get_current_area(self):
        return self.settings.get("current_area", "A")

    def set_translate_area(self, start_x, start_y, end_x, end_y, area):
        """Save the translation area with deep copy to prevent reference issues."""
        if "translate_areas" not in self.settings:
            self.settings["translate_areas"] = {}

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô
        self.settings["translate_areas"][area] = {
            "start_x": int(start_x),
            "start_y": int(start_y),
            "end_x": int(end_x),
            "end_y": int(end_y),
        }

        logging.info(
            f"Area {area} coordinates saved: ({start_x},{start_y}) to ({end_x},{end_y})"
        )

    def get_translate_area(self, area):
        """Return the translation area data with a new copy to prevent reference issues."""
        translate_areas = self.settings.get("translate_areas", {})
        area_data = translate_areas.get(area)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        if area_data:
            return {
                "start_x": area_data.get("start_x", 0),
                "start_y": area_data.get("start_y", 0),
                "end_x": area_data.get("end_x", 0),
                "end_y": area_data.get("end_y", 0),
            }

        return None

    def set_api_parameters(
        self, model=None, max_tokens=None, temperature=None, top_p=None
    ):
        try:
            if "api_parameters" not in self.settings:
                self.settings["api_parameters"] = {}

            api_params = self.settings["api_parameters"]
            changes = []

            if model is not None:
                if model not in self.VALID_MODELS:
                    raise ValueError(f"Invalid model: {model}")
                old_model = api_params.get("model")
                model_info = self.VALID_MODELS[model]
                api_params.update(
                    {"model": model, "displayed_model": model_info["display_name"]}
                )
                changes.append(f"Model: {old_model} -> {model}")

            if max_tokens is not None:
                if not (100 <= max_tokens <= 1000):
                    raise ValueError("Max tokens must be between 100 and 1000")
                old_tokens = api_params.get("max_tokens")
                api_params["max_tokens"] = max_tokens
                changes.append(f"Max tokens: {old_tokens} -> {max_tokens}")

            if temperature is not None:
                if not (0.1 <= temperature <= 1.0):
                    raise ValueError("Temperature must be between 0.1 and 1.0")
                old_temp = api_params.get("temperature")
                api_params["temperature"] = temperature
                changes.append(f"Temperature: {old_temp} -> {temperature}")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å top_p ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini models
            current_model_type = self.VALID_MODELS.get(
                model or api_params.get("model", ""), {}
            ).get("type")

            if current_model_type == "gemini":
                if top_p is not None:
                    if not (0.1 <= top_p <= 1.0):
                        raise ValueError("Top P must be between 0.1 and 1.0")
                    old_top_p = api_params.get("top_p")
                    api_params["top_p"] = top_p
                    changes.append(f"Top P: {old_top_p} -> {top_p}")

            self.save_settings()

            if changes:
                logging.info("\n=== API Parameters Updated ===")
                for change in changes:
                    logging.info(change)
                logging.info(f"Current Settings: {api_params}")
                logging.info("============================\n")

            return True, None
        except Exception as e:
            logging.error(f"Error setting API parameters: {str(e)}")
            return False, str(e)

    def get_displayed_model(self):
        """Return the model name for UI display."""
        api_params = self.get_api_parameters()
        return api_params.get(
            "displayed_model", api_params.get("model", "gemini-2.0-flash")
        )

    def get_api_parameters(self):
        """Return the current API parameters."""
        params = self.settings.get(
            "api_parameters", self.DEFAULT_API_PARAMETERS.copy()
        ).copy()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö proxies ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if "proxies" in params:
            del params["proxies"]

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        if "temperature" in params:
            params["temperature"] = round(params["temperature"], 2)
        if "top_p" in params:
            params["top_p"] = round(params["top_p"], 2)

        return params

    def get_all_settings(self):
        """‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dictionary

        Returns:
            dict: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        """
        return self.settings

    # +++ NEW METHOD +++
    def find_preset_by_areas(self, area_string):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset (1-6) ‡∏ó‡∏µ‡πà‡∏°‡∏µ area_string ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô

        Args:
            area_string (str): ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô "A+B")

        Returns:
            int | None: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset ‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        """
        try:
            presets = self.get_all_presets()  # ‡πÉ‡∏ä‡πâ get_all_presets ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö area string ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            target_areas_sorted = (
                "+".join(sorted(area_string.split("+"))) if area_string else ""
            )

            for i, preset in enumerate(presets):
                preset_areas = preset.get("areas", "")
                preset_areas_sorted = (
                    "+".join(sorted(preset_areas.split("+"))) if preset_areas else ""
                )
                if preset_areas_sorted == target_areas_sorted:
                    return i + 1  # ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset (1-based)
            return None  # ‡πÑ‡∏°‡πà‡∏û‡∏ö preset ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        except Exception as e:
            logging.error(f"Error finding preset by areas '{area_string}': {e}")
            return None

    # +++ NEW METHOD +++
    def get_preset_data(self, preset_number):
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preset ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î

        Args:
            preset_number (int): ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç preset (1-6)

        Returns:
            dict | None: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preset ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        """
        preset = self.get_preset(preset_number)  # ‡πÉ‡∏ä‡πâ get_preset ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if preset:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ default ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
            if "name" not in preset:
                preset["name"] = (
                    f"Preset {preset_number}"  # ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å ensure_default_values ‡πÅ‡∏•‡πâ‡∏ß
                )
            if "role" not in preset:
                preset["role"] = "custom"  # ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å ensure_default_values ‡πÅ‡∏•‡πâ‡∏ß
            if "areas" not in preset:
                preset["areas"] = ""  # ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤ ensure ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if "coordinates" not in preset or not isinstance(
                preset.get("coordinates"), dict
            ):
                preset["coordinates"] = {}
            return preset
        return None

    def save_ui_position(self, ui_name, geometry_str):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á UI

        Args:
            ui_name (str): ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á UI ('main_ui', 'mini_ui', 'translated_ui', 'control_ui', 'logs_ui')
            geometry_str (str): ‡∏Ñ‡πà‡∏≤ geometry ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á (format: 'WxH+X+Y')
        """
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ui_positions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if "ui_positions" not in self.settings:
            self.settings["ui_positions"] = {}

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ geometry string
        self.settings["ui_positions"][ui_name] = geometry_str
        logging.info(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {ui_name}: {geometry_str}")

        # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á save_settings() ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ö‡πà‡∏≠‡∏¢‡πÜ

    def get_ui_position(self, ui_name):
        """‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á UI

        Args:
            ui_name (str): ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á UI ('main_ui', 'mini_ui', 'translated_ui', 'control_ui', 'logs_ui')

        Returns:
            str: ‡∏Ñ‡πà‡∏≤ geometry ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        if "ui_positions" in self.settings and ui_name in self.settings["ui_positions"]:
            return self.settings["ui_positions"][ui_name]
        return None

    def save_monitor_info(self, primary_monitor, all_monitors):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

        Args:
            primary_monitor (str): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å format: "WxH+X+Y"
            all_monitors (list): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î format: [{"w": width, "h": height, "x": pos_x, "y": pos_y}]
        """
        if "ui_positions" not in self.settings:
            self.settings["ui_positions"] = {}
        if "monitor_info" not in self.settings["ui_positions"]:
            self.settings["ui_positions"]["monitor_info"] = {}

        self.settings["ui_positions"]["monitor_info"]["primary"] = primary_monitor
        self.settings["ui_positions"]["monitor_info"]["all_monitors"] = all_monitors
        logging.info(
            f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: ‡∏´‡∏•‡∏±‡∏Å={primary_monitor}, ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î={len(all_monitors)} ‡∏à‡∏≠"
        )

    def get_monitor_info(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

        Returns:
            tuple: (primary_monitor, all_monitors) ‡∏´‡∏£‡∏∑‡∏≠ (None, None) ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        if (
            "ui_positions" in self.settings
            and "monitor_info" in self.settings["ui_positions"]
        ):
            monitor_info = self.settings["ui_positions"]["monitor_info"]
            return (monitor_info.get("primary"), monitor_info.get("all_monitors"))
        return (None, None)

    def save_all_ui_positions(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå settings.json ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á UI"""
        self.save_settings()
        logging.info("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå settings.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")


class SettingsUI:
    def __init__(
        self,
        parent,
        settings,
        apply_settings_callback,
        update_hotkeys_callback,
        main_app=None,
        toggle_click_callback=None,
        toggle_hover_callback=None,
    ):
        self.parent = parent
        self.settings = settings
        self.apply_settings_callback = apply_settings_callback
        self.update_hotkeys_callback = update_hotkeys_callback
        self.main_app = main_app  # ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á MagicBabelApp
        self.toggle_click_callback = toggle_click_callback
        self.toggle_hover_callback = toggle_hover_callback
        self.settings_window = None
        self.settings_visible = False
        self.ocr_toggle_callback = None
        self.on_close_callback = None

        # Initialize modern theme - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô create_settings_window
        self.theme = SettingsUITheme

        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô MBB
        self.load_icons()

        self.create_settings_window()
        self.advance_ui = None
        self.hotkey_ui = None
        self.font_ui = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á FontUI
        self.font_manager = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á FontManager

    def load_icons(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô MBB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header"""
        try:
            # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô MBB ‡∏Ç‡∏ô‡∏≤‡∏î 64x64 px ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header
            icon_size = (64, 64)
            self.mbb_icon = AssetManager.load_icon("mbb_icon.png", icon_size)
        except Exception as e:
            print(f"Warning: Could not load mbb_icon.png: {e}")
            self.mbb_icon = None

    def get_theme_color(self, color_key):
        """Get color from new theme or fallback to appearance_manager"""
        try:
            return SettingsUITheme.get_color(color_key)
        except:
            # Fallback to appearance_manager colors
            fallback_map = {
                "bg_primary": appearance_manager.bg_color,
                "bg_secondary": appearance_manager.bg_color,
                "bg_tertiary": "#333333",
                "text_primary": "white",
                "text_secondary": "#AAAAAA",
                "success": "#4CAF50",
                "error": "#FF5252",
                "border_normal": "#555555",
                "border_focus": "#6D6D6D",
            }
            return fallback_map.get(color_key, appearance_manager.bg_color)

    def get_theme_font(self, size="normal", weight="normal"):
        """Get font from new theme or fallback to default fonts"""
        try:
            return SettingsUITheme.get_font(size, weight)
        except:
            # Fallback to default fonts
            font_map = {
                "small": ("Bai Jamjuree Light", 8),
                "normal": ("Bai Jamjuree Light", 13),
                "medium": ("Bai Jamjuree Light", 13),
                "large": ("Bai Jamjuree Light", 17),
                "title": ("Nasalization Rg", 14),
            }
            font_tuple = font_map.get(size, ("Bai Jamjuree Light", 13))
            if weight == "bold":
                return (font_tuple[0], font_tuple[1], "bold")
            return font_tuple

    tk.Canvas.create_rounded_rect = lambda self, x1, y1, x2, y2, radius=25, **kwargs: (
        self.create_arc(
            x1, y1, x1 + 2 * radius, y1 + 2 * radius, start=90, extent=90, **kwargs
        )
        + self.create_arc(
            x2 - 2 * radius, y1, x2, y1 + 2 * radius, start=0, extent=90, **kwargs
        )
        + self.create_arc(
            x2 - 2 * radius, y2 - 2 * radius, x2, y2, start=270, extent=90, **kwargs
        )
        + self.create_arc(
            x1, y2 - 2 * radius, x1 + 2 * radius, y2, start=180, extent=90, **kwargs
        )
        + self.create_rectangle(x1 + radius, y1, x2 - radius, y2, **kwargs)
        + self.create_rectangle(x1, y1 + radius, x2, y2 - radius, **kwargs)
    )

    def create_settings_section(self, parent, title, colors):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Section Frame ‡πÉ‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå Flat Design ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        """
        # ‡πÉ‡∏ä‡πâ Frame ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô highlightbackground
        section_container = tk.Frame(
            parent,
            bg=colors["bg"],
            highlightbackground=colors["border"],
            highlightthickness=1,
        )
        section_container.pack(fill=tk.X, padx=10, pady=(8, 0))

        # Frame ‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á padding)
        inner_frame = tk.Frame(section_container, bg=colors["bg"])
        inner_frame.pack(fill=tk.X, expand=True, padx=10, pady=10)

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á Section
        title_label = tk.Label(
            inner_frame,
            text=title,
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=self.theme.get_font("medium", "bold"),  # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ font ‡∏à‡∏≤‡∏Å theme ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ
            anchor="w",
        )
        title_label.pack(fill=tk.X, pady=(0, 8))

        return inner_frame

    def create_settings_window(self):
        self.settings_window = tk.Toplevel(self.parent)
        self.settings_window.overrideredirect(True)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ window ‡∏ó‡∏∂‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        self.settings_window.attributes("-alpha", 1.0)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
        try:
            from icon_manager import set_window_icon_simple
            set_window_icon_simple(self.settings_window)
        except Exception:
            pass
            
        appearance_manager.apply_style(self.settings_window)
        self.create_settings_ui()
        self.settings_window.withdraw()

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° protocol handler
        self.settings_window.protocol("WM_DELETE_WINDOW", self.close_settings)

    def set_ocr_toggle_callback(self, callback):
        self.ocr_toggle_callback = callback
        if self.advance_ui:
            self.advance_ui.settings_ui.ocr_toggle_callback = callback

    def open_settings(self, parent_x, parent_y, parent_width, mbb_side="left"):
        """Open settings window at specified position relative to parent

        Args:
            parent_x (int): X position ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á MBB
            parent_y (int): Y position ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á MBB
            parent_width (int): ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á MBB
            mbb_side (str): ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á MBB ('left' ‡∏´‡∏£‡∏∑‡∏≠ 'right')
        """
        # ‡πÉ‡∏ä‡πâ logic ‡πÅ‡∏ö‡∏ö‡∏â‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Settings UI
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Settings window
            self.settings_window.update_idletasks()
            settings_width = self.settings_window.winfo_reqwidth()
            if settings_width < 400:  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
                settings_width = 400

            gap = 20  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á MBB ‡πÅ‡∏•‡∏∞ Settings

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≠‡∏†‡∏≤‡∏û
            try:
                if HAS_WIN32:
                    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö control_ui.py
                    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ MBB window handle ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô parent
                    if hasattr(self, "parent") and hasattr(self.parent, "winfo_id"):
                        main_hwnd = int(self.parent.winfo_id())
                        hmonitor = win32api.MonitorFromWindow(
                            main_hwnd, win32con.MONITOR_DEFAULTTONEAREST
                        )

                        monitor_info = win32api.GetMonitorInfo(hmonitor)
                        monitor_rect = monitor_info[
                            "Work"
                        ]  # (left, top, right, bottom)

                        monitor_left = monitor_rect[0]
                        monitor_right = monitor_rect[2]

                        print(f"Settings UI: MBB on monitor: {monitor_rect}")

                    else:
                        # Fallback ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å
                        monitor_left = 0
                        monitor_right = self.settings_window.winfo_screenwidth()
                else:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ win32api, ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å
                    monitor_left = 0
                    monitor_right = self.settings_window.winfo_screenwidth()

            except Exception as e:
                print(f"Failed to get monitor info for Settings: {e}")
                # Fallback ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å
                monitor_left = 0
                monitor_right = self.settings_window.winfo_screenwidth()

            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° MBB side
            if mbb_side == "left":
                # MBB ‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢ -> ‡∏ß‡∏≤‡∏á Settings ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
                x = parent_x + parent_width + gap
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏•‡πâ‡∏ô‡∏à‡∏≠
                if x + settings_width > monitor_right:
                    x = parent_x - settings_width - gap  # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
            else:
                # MBB ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤ -> ‡∏ß‡∏≤‡∏á Settings ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
                x = parent_x - settings_width - gap
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏•‡πâ‡∏ô‡∏à‡∏≠
                if x < monitor_left:
                    x = parent_x + parent_width + gap  # ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤

            y = parent_y

            print(f"Settings UI positioned at: {x}, {y} (MBB side: {mbb_side})")

        except Exception as e:
            print(f"Error in smart positioning for Settings, using fallback: {e}")
            # Fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            x = parent_x + parent_width + 20
            y = parent_y

        self.settings_window.geometry(f"+{x}+{y}")

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        self.settings_window.attributes("-alpha", 1.0)

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        self.font_size_var.set(str(self.settings.get("font_size")))
        self.font_var.set(self.settings.get("font"))

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        font_name = self.settings.get("font")
        font_size = self.settings.get("font_size")
        self.font_display_label.config(text=f"{font_name} ({font_size}px)")

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ width ‡πÅ‡∏•‡∏∞ height
        self.width_entry.delete(0, tk.END)
        self.width_entry.insert(0, str(self.settings.get("width")))
        self.height_entry.delete(0, tk.END)
        self.height_entry.insert(0, str(self.settings.get("height")))

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggle switches
        self.force_translate_var.set(self.settings.get("enable_force_translate", True))
        self.auto_hide_var.set(self.settings.get("enable_auto_hide", True))
        self.click_translate_var.set(self.settings.get("enable_click_translate", False))

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á toggle switches
        self.indicators = getattr(self, "indicators", {})
        for indicator_id, data in self.indicators.items():
            variable = data["variable"]
            self.update_switch_ui(indicator_id, variable.get())

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ä‡∏≠‡∏£‡πå‡∏ï‡∏Ñ‡∏±‡∏ó
        toggle_ui_shortcut = self.settings.get_shortcut("toggle_ui", "alt+l")
        start_stop_shortcut = self.settings.get_shortcut("start_stop_translate", "f9")
        self.toggle_ui_btn.config(text=toggle_ui_shortcut.upper())
        self.start_stop_btn.config(text=start_stop_shortcut.upper())

        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.settings_window.deiconify()
        self.settings_window.lift()
        self.settings_window.attributes("-topmost", True)
        self.settings_visible = True

        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°
        if hasattr(self, "display_button"):
            self.display_button.config(text="SCREEN/CPU")
        if hasattr(self, "hotkey_button"):
            self.hotkey_button.config(text="HOTKEY")
        if hasattr(self, "font_button"):
            self.font_button.config(text="FONT")

    def create_tooltip(self, widget, text):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö widget"""

        def enter(event):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á tooltip
            x, y, _, _ = widget.bbox("insert")
            x += widget.winfo_rootx() + 25
            y += widget.winfo_rooty() + 25

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á top level
            self.tooltip = tk.Toplevel(widget)
            self.tooltip.overrideredirect(True)
            self.tooltip.geometry(f"+{x}+{y}")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á label
            label = tk.Label(
                self.tooltip,
                text=text,
                bg="#333333",
                fg="white",
                relief=tk.SOLID,
                borderwidth=1,
                font=("Bai Jamjuree Light", 11),
                padx=5,
                pady=2,
            )
            label.pack()

        def leave(event):
            # ‡∏•‡∏ö tooltip
            if hasattr(self, "tooltip"):
                self.tooltip.destroy()

        # ‡∏ú‡∏π‡∏Å event
        widget.bind("<Enter>", enter)
        widget.bind("<Leave>", leave)

    def open(self):
        """Toggle the advance window visibility"""
        if self.advance_window is None or not self.advance_window.winfo_exists():
            self.create_advance_window()

        if self.advance_window.winfo_viewable():
            self.close()  # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô
            if hasattr(self.parent, "advance_button"):
                self.parent.advance_button.config(text="Screen/API")
        else:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á settings ui ‡πÇ‡∏î‡∏¢‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ 5px
            parent_x = self.parent.winfo_x()
            parent_y = self.parent.winfo_y()
            parent_width = self.parent.winfo_width()

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
            x = parent_x + parent_width + 5  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 5px
            y = parent_y  # ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö settings ui

            self.advance_window.geometry(f"+{x}+{y}")
            self.advance_window.deiconify()
            self.advance_window.lift()  # ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î
            self.advance_window.attributes("-topmost", True)

            self.load_current_settings()
            self.is_changed = False
            self.update_save_button()

            if hasattr(self.parent, "advance_button"):
                self.parent.advance_button.config(text="Close Advanced")

    def close_settings(self):
        self.settings_window.withdraw()
        self.settings_visible = False
        if self.advance_ui:
            self.advance_ui.close()
        if self.hotkey_ui:
            self.hotkey_ui.close()
        # ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î font manager ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î settings window
        # ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ font manager ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ

        self.hotkey_button.config(text="HotKey")  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°
        self.font_button.config(text="FONT")  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if hasattr(self, "on_close_callback") and self.on_close_callback:
            self.on_close_callback()

    def validate_window_size(self, event=None):
        """Validate and update window size from entries"""
        try:
            width = int(self.width_entry.get())
            height = int(self.height_entry.get())

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            width = max(300, min(2000, width))
            height = max(200, min(1000, height))

            # Update entries with validated values
            self.width_entry.delete(0, tk.END)
            self.width_entry.insert(0, str(width))
            self.height_entry.delete(0, tk.END)
            self.height_entry.insert(0, str(height))

            # Save to settings
            self.settings.set("width", width)
            self.settings.set("height", height)

            return True

        except ValueError:
            messagebox.showerror(
                "Invalid Input", "Please enter valid numbers for width and height"
            )

            # Reset to current settings values
            self.width_entry.delete(0, tk.END)
            self.width_entry.insert(0, str(self.settings.get("width")))
            self.height_entry.delete(0, tk.END)
            self.height_entry.insert(0, str(self.settings.get("height")))

            return False

    def create_settings_ui(self):
        """Initialize and setup all UI components with a new flat design"""
        # --- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Flat Design ---
        colors = {
            "bg": "#2E2E2E",  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏Å
            "border": "#4A4A4A",  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
            "text_primary": "#F0F0F0",  # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏ô‡∏ß‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
            "text_secondary": "#AAAAAA",  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏á
            "entry_bg": "#3C3C3C",  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å
            "button_hover": "#454545",  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ä‡∏µ‡πâ
            "accent": "#4A90E2",  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà Active (‡πÄ‡∏ä‡πà‡∏ô Toggle)
            "accent_success": "#50A254",  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            "accent_error": "#D05454",  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Error
        }

        # --- 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å ---
        self.settings_window.configure(bg=colors["bg"])
        self.settings_window.overrideredirect(True)
        self.settings_window.attributes("-alpha", 1.0)

        # --- 3. ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß (Header) ---
        header_frame = tk.Frame(self.settings_window, bg=colors["bg"])
        header_frame.pack(fill=tk.X, padx=10, pady=10)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î (X) ‡πÅ‡∏ö‡∏ö Flat
        close_label = tk.Label(
            header_frame,
            text="‚úï",
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=("Arial", 14),
        )
        close_label.place(x=5, y=0)
        close_label.bind("<Button-1>", lambda e: self.close_settings())
        close_label.bind(
            "<Enter>", lambda e: close_label.config(fg=colors["accent_error"])
        )
        close_label.bind(
            "<Leave>", lambda e: close_label.config(fg=colors["text_secondary"])
        )

        # Container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ä‡πâ expand=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)
        header_main_frame = tk.Frame(header_frame, bg=colors["bg"])
        header_main_frame.pack(expand=True, pady=(20, 0))

        if hasattr(self, "mbb_icon") and self.mbb_icon:
            icon_label = tk.Label(
                header_main_frame, image=self.mbb_icon, bg=colors["bg"]
            )
            icon_label.pack(side=tk.LEFT, padx=(10, 15))

        text_frame = tk.Frame(header_main_frame, bg=colors["bg"])
        text_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

        tk.Label(
            text_frame,
            text="SETTINGS",
            bg=colors["bg"],
            fg=colors["text_primary"],
            font=self.theme.get_font("title", "bold"),
            anchor="w",
        ).pack(fill=tk.X)
        tk.Label(
            text_frame,
            text="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏• (TUI)",
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=self.theme.get_font("normal"),
            anchor="w",
        ).pack(fill=tk.X)

        # Main content frame
        main_frame = tk.Frame(self.settings_window, bg=colors["bg"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(10, 15))

        # --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Sections ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏™‡πÑ‡∏ï‡∏•‡πå Flat ---
        tui_section = self.create_settings_section(
            main_frame, "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏• (TUI)", colors
        )
        features_section = self.create_settings_section(main_frame, "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°", colors)
        advanced_section = self.create_settings_section(
            main_frame, "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á", colors
        )
        info_section = self.create_settings_section(
            main_frame, "‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô(‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π HOTKEY)", colors
        )

        # --- 5. ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ Widgets ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Section ---

        # TUI Section Content
        font_frame = tk.Frame(tui_section, bg=colors["bg"])
        font_frame.pack(fill=tk.X, pady=2)
        tk.Label(
            font_frame,
            text="Font Settings:",
            width=15,
            anchor="w",
            bg=colors["bg"],
            fg=colors["text_primary"],
            font=self.theme.get_font("normal"),
        ).pack(side=tk.LEFT)
        self.font_display_label = tk.Label(
            font_frame,
            text=f"{self.settings.get('font')} ({self.settings.get('font_size')}px)",
            bg=colors["entry_bg"],
            fg=colors["text_primary"],
            font=self.theme.get_font("normal"),
            anchor="w",
            padx=10,
        )
        self.font_display_label.pack(side=tk.LEFT, fill=tk.X, expand=True, ipady=4)
        self.font_size_var = tk.StringVar(value=str(self.settings.get("font_size", 24)))
        self.font_var = tk.StringVar(
            value=self.settings.get("font", "IBM Plex Sans Thai Medium")
        )

        size_frame = tk.Frame(tui_section, bg=colors["bg"])
        size_frame.pack(fill=tk.X, pady=(8, 2))
        entry_style = {
            "bg": colors["entry_bg"],
            "fg": colors["text_primary"],
            "insertbackground": colors["text_primary"],
            "relief": "flat",
            "highlightthickness": 0,
        }
        tk.Label(
            size_frame,
            text="Width:",
            anchor="w",
            bg=colors["bg"],
            fg=colors["text_primary"],
            font=self.theme.get_font("normal"),
        ).pack(side=tk.LEFT)
        self.width_entry = tk.Entry(size_frame, width=5, **entry_style)
        self.width_entry.pack(side=tk.LEFT, padx=5, ipady=4)
        tk.Label(
            size_frame,
            text="Height:",
            anchor="w",
            bg=colors["bg"],
            fg=colors["text_primary"],
            font=self.theme.get_font("normal"),
        ).pack(side=tk.LEFT, padx=(10, 0))
        self.height_entry = tk.Entry(size_frame, width=5, **entry_style)
        self.height_entry.pack(side=tk.LEFT, padx=5, ipady=4)
        self.width_entry.bind("<FocusOut>", self.validate_window_size)
        self.height_entry.bind("<FocusOut>", self.validate_window_size)

        # Apply Button
        self.apply_button = tk.Button(
            size_frame,
            text="APPLY",
            command=self.apply_settings,
            bg=colors["accent"],
            fg=colors["text_primary"],
            relief="flat",
            activebackground=colors["accent"],
            activeforeground=colors["text_primary"],
            bd=0,
            padx=15,
            font=self.theme.get_font("normal", "bold"),
        )
        self.apply_button.pack(side=tk.RIGHT)

        # Features Section Content
        self.force_translate_var = tk.BooleanVar(
            value=self.settings.get("enable_force_translate", True)
        )
        self.auto_hide_var = tk.BooleanVar(
            value=self.settings.get("enable_auto_hide", True)
        )
        self.click_translate_var = tk.BooleanVar(
            value=self.settings.get("enable_click_translate", False)
        )
        self.hover_translation_var = tk.BooleanVar(
            value=self.settings.get("enable_hover_translation", False)
        )

        self.create_toggle_switch(
            features_section,
            "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ R-click ‡∏ö‡∏ô TUI",
            self.force_translate_var,
            colors,
        )
        self.create_toggle_switch(
            features_section,
            "‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏õ‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î W,A,S,D (‡∏Å‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏™‡πå)",
            self.auto_hide_var,
            colors,
        )
        self.create_toggle_switch(
            features_section, "‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö 1‡∏Ñ‡∏£‡∏±‡πâ‡∏á/1‡∏Ñ‡∏•‡∏¥‡πä‡∏Å", self.click_translate_var, colors
        )
        self.create_toggle_switch(
            features_section,
            "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏• ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏•‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô(‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á preset ‡∏Å‡πà‡∏≠‡∏ô)",
            self.hover_translation_var,
            colors,
        )

        # Advanced Section Content
        button_frame = tk.Frame(advanced_section, bg=colors["bg"])
        button_frame.pack(fill=tk.X, pady=5)
        flat_button_style = {
            "bg": colors["bg"],
            "fg": colors["text_primary"],
            "activebackground": colors["button_hover"],
            "activeforeground": colors["text_primary"],
            "relief": "flat",
            "bd": 0,
            "width": 10,
        }

        self.font_button = tk.Button(
            button_frame, text="FONT", command=self.toggle_font_ui, **flat_button_style
        )
        self.display_button = tk.Button(
            button_frame,
            text="SCREEN/CPU",
            command=self.toggle_advance_ui,
            **flat_button_style,
        )
        self.model_button = tk.Button(
            button_frame,
            text="MODEL",
            command=self.toggle_model_settings,
            **flat_button_style,
        )
        self.hotkey_button = tk.Button(
            button_frame,
            text="HOTKEY",
            command=self.toggle_hotkey_ui,
            **flat_button_style,
        )

        for button in [
            self.font_button,
            self.display_button,
            self.model_button,
            self.hotkey_button,
        ]:
            button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2, ipady=5)
            button.bind(
                "<Enter>", lambda e, b=button: b.config(bg=colors["button_hover"])
            )
            button.bind("<Leave>", lambda e, b=button: b.config(bg=colors["bg"]))

        # Splash Screen Section Content (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)
        splash_section = self.create_settings_section(
            main_frame, "‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", colors
        )
        
        # Create splash screen type selection
        splash_frame = tk.Frame(splash_section, bg=colors["bg"])
        splash_frame.pack(fill=tk.X, pady=5)
        
        self.splash_type_var = tk.StringVar(
            value=self.settings.get("splash_screen_type", "video")
        )
        
        # Radio buttons for splash screen type
        splash_options = [
            ("‡∏†‡∏≤‡∏û‡∏ô‡∏¥‡πà‡∏á", "image"),
            ("‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß", "video"),
            ("‡∏õ‡∏¥‡∏î", "off")
        ]
        
        for text, value in splash_options:
            rb = tk.Radiobutton(
                splash_frame,
                text=text,
                variable=self.splash_type_var,
                value=value,
                bg=colors["bg"],
                fg=colors["text_primary"],
                activebackground=colors["bg"],
                activeforeground=colors["text_primary"],
                selectcolor=colors["button_hover"],
                font=self.theme.get_font("normal"),
            )
            rb.pack(side=tk.LEFT, padx=10)
        
        # Note about requiring restart
        tk.Label(
            splash_section,
            text="* ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=self.theme.get_font("small"),
        ).pack(fill=tk.X, pady=(5, 0))

        # Info Section Content
        shortcut_frame = tk.Frame(info_section, bg=colors["bg"])
        shortcut_frame.pack(fill=tk.X)
        toggle_ui_shortcut = self.settings.get_shortcut("toggle_ui", "alt+l")
        start_stop_shortcut = self.settings.get_shortcut("start_stop_translate", "f9")
        force_translate_key_shortcut = self.settings.get_shortcut("force_translate_key", "f10")  # ‡πÉ‡∏´‡∏°‡πà

        shortcut_label_style = {
            "bg": colors["entry_bg"],
            "fg": colors["text_primary"],
            "font": self.theme.get_font("small", "bold"),
            "padx": 8,
            "pady": 3,
        }
        tk.Label(
            shortcut_frame,
            text="Toggle UI:",
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=self.theme.get_font("small"),
            anchor="e",
        ).pack(side=tk.LEFT, padx=(5, 5))
        self.toggle_ui_btn = tk.Label(
            shortcut_frame, text=toggle_ui_shortcut.upper(), **shortcut_label_style
        )
        self.toggle_ui_btn.pack(side=tk.LEFT)
        tk.Label(
            shortcut_frame,
            text="Start/Stop:",
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=self.theme.get_font("small"),
            anchor="e",
        ).pack(side=tk.LEFT, padx=(15, 5))
        self.start_stop_btn = tk.Label(
            shortcut_frame, text=start_stop_shortcut.upper(), **shortcut_label_style
        )
        self.start_stop_btn.pack(side=tk.LEFT)
        
        # ‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Force translate hotkeys
        shortcut_frame2 = tk.Frame(info_section, bg=colors["bg"])
        shortcut_frame2.pack(fill=tk.X, pady=(5, 0))
        
        tk.Label(
            shortcut_frame2,
            text="Force (Key):",
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=self.theme.get_font("small"),
            anchor="e",
        ).pack(side=tk.LEFT, padx=(5, 5))
        self.force_key_btn = tk.Label(
            shortcut_frame2, text=force_translate_key_shortcut.upper(), **shortcut_label_style
        )
        self.force_key_btn.pack(side=tk.LEFT)
        
        tk.Label(
            shortcut_frame2,
            text="Force (R-Click TUI):",
            bg=colors["bg"],
            fg=colors["text_secondary"],
            font=self.theme.get_font("small"),
            anchor="e",
        ).pack(side=tk.LEFT, padx=(15, 5))
        self.force_rclick_btn = tk.Label(
            shortcut_frame2, text="R-CLICK", **shortcut_label_style
        )
        self.force_rclick_btn.pack(side=tk.LEFT)

        self.version_label = tk.Label(
            info_section,
            text=get_settings_version(),  # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å version_manager
            bg=colors["bg"],
            fg="#A020F0",  # ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini
            font=("JetBrains Mono NL Light", 10),  # ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini
            anchor="center",
        )
        self.version_label.pack(fill=tk.X, pady=(10, 0))

        # --- 6. ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ---
        self.status_label = tk.Label(
            main_frame,
            text="",
            bg=colors["bg"],
            fg=colors["accent_success"],
            font=self.theme.get_font("normal", "bold"),
        )
        self.status_label.pack(pady=(5, 0))

        self.settings_window.bind("<Button-1>", self.start_move_settings)
        self.settings_window.bind("<ButtonRelease-1>", self.stop_move_settings)
        self.settings_window.bind("<B1-Motion>", self.do_move_settings)

        self.width_entry.insert(0, str(self.settings.get("width", 960)))
        self.height_entry.insert(0, str(self.settings.get("height", 240)))

    def toggle_advance_ui(self):
        """Toggle Advanced UI window"""
        if (
            self.advance_ui is None
            or not hasattr(self.advance_ui, "advance_window")
            or not self.advance_ui.advance_window.winfo_exists()
        ):
            self.advance_ui = AdvanceUI(
                self.settings_window,
                self.settings,
                self.apply_settings_callback,
                self.ocr_toggle_callback,
            )

        if self.advance_ui.advance_window.winfo_viewable():
            self.advance_ui.close()
            self.display_button.config(text="Screen/CPU")
        else:
            self.advance_ui.open()
            self.display_button.config(text="Close Screen")

    def on_model_window_close(self):
        """Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ModelSettings ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á"""
        if hasattr(self, "model_button") and self.model_button.winfo_exists():
            self.model_button.config(text="MODEL")
        logging.info("ModelSettings window closed, button state has been reset.")

    def toggle_model_settings(self):
        """Toggle Model Settings window and handle button state with callbacks."""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        is_open = (
            hasattr(self, "model_settings")
            and self.model_settings
            and self.model_settings.model_window
            and self.model_settings.model_window.winfo_exists()
            and self.model_settings.model_window.winfo_viewable()
        )

        if is_open:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô handle_close ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏•‡∏π‡∏Å
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ callback ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
            self.model_settings.handle_close()
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            if not hasattr(self, "model_settings") or self.model_settings is None:
                from model import ModelSettings

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ self.main_app ‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î update_api_settings ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if hasattr(self.main_app, "update_api_settings"):
                    main_app_ref = self.main_app
                    logging.info("Found update_api_settings in main_app")
                else:
                    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ parent ‡∏ñ‡πâ‡∏≤ main_app ‡πÑ‡∏°‡πà‡∏°‡∏µ
                    if hasattr(self.parent, "update_api_settings"):
                        main_app_ref = self.parent
                        logging.info(
                            "Found update_api_settings in parent, using parent as main_app"
                        )
                    else:
                        main_app_ref = None
                        logging.warning(
                            "Could not find update_api_settings in either main_app or parent, model changes may not apply correctly"
                        )

                self.model_settings = ModelSettings(
                    self.settings_window,
                    self.settings,
                    self.apply_settings_callback,
                    main_app=main_app_ref,
                    on_close_callback=self.on_model_window_close,  # <--- ‡∏™‡πà‡∏á Callback ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                )

            self.model_settings.open()
            self.model_button.config(text="Close Model")

    def toggle_hotkey_ui(self):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Hotkey UI"""
        try:
            if (
                not hasattr(self, "simplified_hotkey_ui")
                or self.simplified_hotkey_ui is None
            ):
                self.simplified_hotkey_ui = SimplifiedHotkeyUI(
                    self.settings_window, self.settings, self.update_hotkeys_callback
                )

            if (
                self.simplified_hotkey_ui.window
                and self.simplified_hotkey_ui.window.winfo_exists()
            ):
                self.simplified_hotkey_ui.close()
                self.hotkey_button.config(text="HotKey")
            else:
                self.simplified_hotkey_ui.open()
                self.hotkey_button.config(text="Close Hotkeys")

        except Exception as e:
            logging.error(f"Error in toggle_hotkey_ui: {e}")
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Hotkey UI: {e}")

    def toggle_font_ui(self):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Font Manager"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á font_manager ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if not self.font_manager:
                self.font_manager = initialize_font_manager(None, self.settings)

            # ‡πÉ‡∏ä‡πâ FontUIManager ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ instance
            font_ui_manager = FontUIManager.get_instance()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° target
            def apply_callback(font_data):
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ font application ‡∏ï‡∏≤‡∏° target
                target = font_data.get("target", "translated_ui")
                
                logging.info(f"üîß Font callback in settings - target: {target}, font: {font_data.get('font')}")
                
                # *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Apply ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ target ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ***
                if target == "translated_ui" and self.main_app:
                    # Apply to translated_ui ONLY
                    logging.info("üìå Applying to translated_ui ONLY...")
                    if hasattr(self.main_app, 'translated_ui') and self.main_app.translated_ui:
                        if hasattr(self.main_app.translated_ui, 'update_font'):
                            self.main_app.translated_ui.update_font(font_data["font"])
                            logging.info(f"‚úÖ Font applied to translated_ui")
                        else:
                            logging.warning("‚ùå translated_ui has no update_font method")
                    else:
                        logging.warning("‚ùå main_app has no translated_ui")
                    
                    # *** ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á translated_logs ***
                    
                elif target == "translated_logs" and self.main_app:
                    # Apply to translated_logs ONLY
                    logging.info("üìå Applying to translated_logs ONLY...")
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á translated_logs ‡πÅ‡∏•‡∏∞ translated_logs_instance
                    logs_instance = None
                    if hasattr(self.main_app, 'translated_logs') and self.main_app.translated_logs:
                        logs_instance = self.main_app.translated_logs
                        logging.info("‚úÖ Found translated_logs")
                    elif hasattr(self.main_app, 'translated_logs_instance') and self.main_app.translated_logs_instance:
                        logs_instance = self.main_app.translated_logs_instance
                        logging.info("‚úÖ Found translated_logs_instance")
                    
                    if logs_instance:
                        if hasattr(logs_instance, '_update_all_fonts'):
                            logging.info(f"üé® Calling _update_all_fonts with font: {font_data['font']}")
                            logs_instance._update_all_fonts(font_data["font"])
                            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å font_family ‡πÉ‡∏´‡∏°‡πà
                            if hasattr(logs_instance, 'current_font_family'):
                                logs_instance.current_font_family = font_data["font"]
                                logging.info(f"‚úÖ Updated current_font_family to: {font_data['font']}")
                            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å settings
                            if hasattr(logs_instance, 'save_settings'):
                                logs_instance.save_settings()
                                logging.info("‚úÖ Saved translated_logs settings")
                            logging.info(f"‚úÖ Font applied to translated_logs ONLY")
                        else:
                            logging.warning("‚ùå translated_logs has no _update_all_fonts method")
                    else:
                        logging.warning("‚ùå main_app has no translated_logs/translated_logs_instance")
                    
                    # *** ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á translated_ui ***
                    
                else:
                    logging.info(f"‚è© Unknown target or no main_app: {target}")
                
                # *** ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï global settings ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ trigger observers ***
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ
                
                logging.info(f"‚úÖ Font callback completed for target: {target}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á FontUI instance
            self.font_ui = font_ui_manager.get_or_create_font_ui(
                self.settings_window,
                self.font_manager,
                self.settings,
                apply_callback
            )
            
            # ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î
            if (
                hasattr(self.font_ui, "font_window")
                and self.font_ui.font_window
                and self.font_ui.font_window.winfo_exists()
                and self.font_ui.font_window.winfo_viewable()
            ):
                self.font_ui.close_font_ui()
                self.font_button.config(text="FONT")
            # ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î
            else:
                self.font_ui.open_font_ui(
                    translated_ui=(
                        self.main_app.translated_ui
                        if hasattr(self.main_app, "translated_ui")
                        else None
                    )
                )
                self.font_button.config(text="Close Font")

        except Exception as e:
            logging.error(f"Error toggling font UI: {e}")
            messagebox.showerror("Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Font Manager: {e}")

    def create_toggle_switch(self, parent, text, variable, colors):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Toggle Switch ‡∏™‡πÑ‡∏ï‡∏•‡πå Flat Design ‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏°‡∏ä‡∏±‡∏î"""
        container = tk.Frame(parent, bg=colors["bg"])
        container.pack(fill=tk.X, pady=4)

        label = tk.Label(
            container,
            text=text,
            bg=colors["bg"],
            fg=colors["text_primary"],
            font=self.theme.get_font("normal"),
            cursor="hand2",
            anchor="w",
        )
        label.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # ‡πÉ‡∏ä‡πâ Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Track ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        track_width, track_height = 42, 22
        track = tk.Frame(
            container,
            width=track_width,
            height=track_height,
            bg=colors["border"],  # ‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Off)
        )
        track.pack(side=tk.RIGHT, padx=5)
        track.pack_propagate(False)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Frame ‡∏´‡∏î‡∏ï‡∏±‡∏ß

        # ‡πÉ‡∏ä‡πâ Label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Knob ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ó‡∏∂‡∏ö
        knob_size = track_height - 6
        knob = tk.Label(track, bg="#FFFFFF")

        def update_switch_look(is_on):
            """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå (‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Knob)"""
            knob_padding = 3
            if is_on:
                track.config(bg=colors["accent"])
                knob.place(
                    x=track_width - knob_size - knob_padding,
                    y=knob_padding,
                    width=knob_size,
                    height=knob_size,
                )
            else:
                track.config(bg=colors["border"])
                knob.place(
                    x=knob_padding, y=knob_padding, width=knob_size, height=knob_size
                )

        def save_toggle_state(*args):
            """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á Toggle ‡∏•‡∏á‡πÉ‡∏ô Settings"""
            new_state = variable.get()
            logging.info(f"SettingsUI: save_toggle_state called with text='{text}', new_state={new_state}")
            
            if "Force Translate" in text or "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏î‡πâ‡∏ß‡∏¢ R-click" in text:
                self.settings.set("enable_force_translate", new_state)
            elif "Hide UI" in text or "‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏õ‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î W,A,S,D" in text:
                self.settings.set("enable_auto_hide", new_state)
            elif "Click Translate" in text or "‡πÅ‡∏õ‡∏•‡πÅ‡∏ö‡∏ö 1‡∏Ñ‡∏£‡∏±‡πâ‡∏á/1‡∏Ñ‡∏•‡∏¥‡πä‡∏Å" in text:
                self.settings.set("enable_click_translate", new_state)
                if self.toggle_click_callback:
                    logging.info(f"SettingsUI: Calling toggle_click_callback with {new_state}")
                    self.toggle_click_callback(new_state)
                else:
                    logging.warning("SettingsUI: toggle_click_callback is None")
            elif "Hover Translation" in text or "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•" in text:
                self.settings.set("enable_hover_translation", new_state)
                if self.toggle_hover_callback:
                    logging.info(f"SettingsUI: Calling toggle_hover_callback with {new_state}")
                    self.toggle_hover_callback(new_state)
                else:
                    logging.warning("SettingsUI: toggle_hover_callback is None")

        # ‡∏•‡πâ‡∏≤‡∏á trace ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        for mode, cb_name in variable.trace_info():
            variable.trace_remove(mode, cb_name)

        # ‡∏ú‡∏π‡∏Å BooleanVar ‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
        variable.trace_add("write", lambda *args: update_switch_look(variable.get()))
        variable.trace_add("write", save_toggle_state)

        # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Widget ‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ
        for widget in [container, label, track, knob]:
            widget.bind(
                "<Button-1>", lambda e: variable.set(not variable.get()), add="+"
            )

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        update_switch_look(variable.get())

    def toggle_switch_state(self, variable):
        """Toggle ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á variable ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI"""
        # Toggle ‡∏Ñ‡πà‡∏≤ variable
        new_state = not variable.get()
        variable.set(new_state)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
        print(f"Variable toggled to: {new_state}")

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ indicator ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö variable ‡∏ô‡∏µ‡πâ
        for indicator_id, data in self.indicators.items():
            if data["variable"] == variable:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏Ç‡∏≠‡∏á switch
                self.update_switch_ui(indicator_id, new_state)
                break

    def toggle_switch(self, indicator_id):
        """Toggle ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á switch ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI"""
        if indicator_id not in self.indicators:
            return

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        indicator_data = self.indicators[indicator_id]
        indicator = indicator_data["indicator"]  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å ["canvas"] ‡πÄ‡∏õ‡πá‡∏ô ["indicator"]
        bg = indicator_data["bg"]
        variable = indicator_data["variable"]

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_value = variable.get()

        # Toggle ‡∏Ñ‡πà‡∏≤ variable
        variable.set(not current_value)

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        self.update_switch_ui(indicator_id, not current_value)

    def update_switch_ui(self, indicator_id, is_on):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏Ç‡∏≠‡∏á switch ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà"""
        if indicator_id not in self.indicators:
            return

        indicator_data = self.indicators[indicator_id]
        indicator = indicator_data["indicator"]
        bg = indicator_data["bg"]
        x_on = indicator_data.get("x_on", 22)
        x_off = indicator_data.get("x_off", 4)

        if is_on:  # ‡πÄ‡∏õ‡∏¥‡∏î
            indicator.place(x=x_on)
            bg.config(bg=self.theme.get_color("success"))  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å theme
        else:  # ‡∏õ‡∏¥‡∏î
            indicator.place(x=x_off)
            bg.config(bg=self.theme.get_color("border_normal"))  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏à‡∏≤‡∏Å theme

    def apply_settings(self, settings_dict=None):
        """Apply settings with validation and show temporary message"""
        try:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Apply ‡∏à‡∏≤‡∏Å settings UI
            if settings_dict is None:
                try:
                    # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å UI
                    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å UI
                    font_size = int(self.font_size_var.get())
                    font = str(self.font_var.get()).strip()
                    width = max(300, min(2000, int(self.width_entry.get())))
                    height = max(200, min(1000, int(self.height_entry.get())))

                    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å toggle switches ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                    enable_force = bool(self.force_translate_var.get())
                    enable_auto_hide = bool(self.auto_hide_var.get())
                    # enable_auto_switch = bool(self.auto_switch_var.get())
                    enable_click_translate = bool(self.click_translate_var.get())
                    enable_hover_translation = bool(self.hover_translation_var.get())
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ splash screen type
                    splash_type = self.splash_type_var.get()

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á settings ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
                    self.settings.set("font_size", font_size)
                    self.settings.set("font", font)
                    self.settings.set("width", width)
                    self.settings.set("height", height)
                    self.settings.set("enable_force_translate", enable_force)
                    self.settings.set("enable_auto_hide", enable_auto_hide)
                    # self.settings.set("enable_auto_area_switch", enable_auto_switch)
                    self.settings.set("enable_click_translate", enable_click_translate)
                    self.settings.set(
                        "enable_hover_translation", enable_hover_translation
                    )
                    self.settings.set("splash_screen_type", splash_type)

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ callback
                    settings_dict = {
                        "font_size": font_size,
                        "font": font,
                        "width": width,
                        "height": height,
                        "enable_force_translate": enable_force,
                        "enable_auto_hide": enable_auto_hide,
                        # "enable_auto_area_switch": enable_auto_switch,
                        "enable_click_translate": enable_click_translate,
                        "enable_hover_translation": enable_hover_translation,
                    }

                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    if self.apply_settings_callback:
                        self.apply_settings_callback(settings_dict)
                        logging.info("Settings applied successfully")

                    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏° Apply ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß - ‡πÉ‡∏ä‡πâ theme colors
                    self.apply_button.config(
                        text="‚úì APPLIED",
                        bg=self.theme.get_color("success"),
                        fg="white",
                        activebackground=self.theme.get_color("success"),
                        activeforeground="white",
                    )

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° success
                    self.status_label.config(text="Settings applied successfully!")

                    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÉ‡∏ä‡πâ theme colors
                    def reset_apply_button():
                        self.apply_button.config(
                            text="APPLY",
                            bg=self.theme.get_color("bg_secondary"),
                            fg=self.theme.get_color("text_primary"),
                            activebackground=self.theme.get_color("hover_light"),
                            activeforeground=self.theme.get_color("text_primary"),
                        )

                    self.settings_window.after(2000, reset_apply_button)
                    self.settings_window.after(
                        2000, lambda: self.status_label.config(text="")
                    )

                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó toggle switch UI ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
                    for indicator_id, data in self.indicators.items():
                        variable = data["variable"]
                        self.update_switch_ui(indicator_id, variable.get())

                    # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                    print(f"Applied settings:")
                    print(f"- Force Translate: {enable_force}")
                    print(f"- Auto Hide: {enable_auto_hide}")
                    print(f"- Click Translate: {enable_click_translate}")
                    print(f"- Hover Translation: {enable_hover_translation}")

                    return True, None

                except ValueError as e:
                    self.status_label.config(
                        text=f"Error: {str(e)}", fg=self.theme.get_color("error")
                    )
                    self.settings_window.after(
                        3000,
                        lambda: self.status_label.config(
                            text="", fg=self.theme.get_color("success")
                        ),
                    )
                    raise ValueError(f"Invalid input value: {str(e)}")

            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å advance settings (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
            else:
                logging.info("Applying advanced settings")
                print(f"üíæ [DEBUG] Applying advance settings: {settings_dict}")

                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡∏•‡∏á settings
                for key, value in settings_dict.items():
                    if value is not None:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None
                        self.settings.set(key, value)
                        print(f"üíæ [DEBUG] Set {key} = {value}")

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
                self.settings.save_settings()
                print("üíæ [DEBUG] Advanced settings saved to file")

                # ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å self.apply_settings_callback ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop
                # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ callback ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å advance_ui ‡πÅ‡∏•‡πâ‡∏ß
                print("üíæ [DEBUG] Advanced settings applied successfully")

                return True, None

        except Exception as e:
            error_msg = f"Error applying settings: {str(e)}"
            logging.error(error_msg)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error - ‡πÉ‡∏ä‡πâ theme colors
            self.status_label.config(text=error_msg, fg=self.theme.get_color("error"))
            self.settings_window.after(
                3000,
                lambda: self.status_label.config(
                    text="", fg=self.theme.get_color("success")
                ),
            )

            return False, error_msg

    def reset_apply_button(self):
        """Reset the apply button text and status label"""
        self.apply_button.config(text="APPLY")
        self.status_label.config(text="")

    def start_move_settings(self, event):
        self.settings_x = event.x
        self.settings_y = event.y

    def stop_move_settings(self, event):
        self.settings_x = None
        self.settings_y = None

    def do_move_settings(self, event):
        deltax = event.x - self.settings_x
        deltay = event.y - self.settings_y
        x = self.settings_window.winfo_x() + deltax
        y = self.settings_window.winfo_y() + deltay
        self.settings_window.geometry(f"+{x}+{y}")

        if (
            self.hotkey_ui
            and self.hotkey_ui.hotkey_window
            and self.hotkey_ui.hotkey_window.winfo_exists()
        ):
            hotkey_window = self.hotkey_ui.hotkey_window
            hotkey_window.update_idletasks()
            settings_height = self.settings_window.winfo_height()
            hotkey_x = x - hotkey_window.winfo_width() - 5
            hotkey_y = y + settings_height - hotkey_window.winfo_height()
            hotkey_window.geometry(f"+{hotkey_x}+{hotkey_y}")

    def open_advance_ui(self):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á advance_ui ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ
        if (
            self.advance_ui is None
            or not hasattr(self.advance_ui, "advance_window")
            or not self.advance_ui.advance_window.winfo_exists()
        ):
            self.advance_ui = AdvanceUI(
                self.settings_window, self.settings, self.apply_settings_callback, None
            )

        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á advance_ui
        self.advance_ui.open()
