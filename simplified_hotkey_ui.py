import tkinter as tk
from tkinter import ttk
from utils_appearance import SettingsUITheme, ModernButton, ModernEntry, ModernFrame
import ctypes
import win32api
import win32con


def is_valid_hotkey(hotkey):
    hotkey = hotkey.lower()
    valid_keys = set("abcdefghijklmnopqrstuvwxyz0123456789")
    valid_functions = set(
        ["f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", "f11", "f12"]
    )
    valid_modifiers = set(["ctrl", "alt", "shift"])

    parts = hotkey.split("+")

    if len(parts) == 1:
        return parts[0] in valid_keys or parts[0] in valid_functions

    if len(parts) > 1:
        modifiers = parts[:-1]
        key = parts[-1]
        return all(mod in valid_modifiers for mod in modifiers) and (
            key in valid_keys or key in valid_functions
        )

    return False


class ToolTip:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Widget ‡πÉ‡∏ô Tkinter"""

    def __init__(
        self, widget, text, bg="#1E1E1E", fg="#FFFFFF", font=("Bai Jamjuree Light", 16)
    ):
        self.widget = widget
        self.text = text
        self.bg = bg
        self.fg = fg
        self.font = font
        self.tooltip_window = None
        self.widget.bind("<Enter>", self.show_tooltip)
        self.widget.bind("<Leave>", self.hide_tooltip)

    def show_tooltip(self, event=None):
        """‡πÅ‡∏™‡∏î‡∏á tooltip ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ widget"""
        x, y, _, _ = self.widget.bbox("insert")
        x += self.widget.winfo_rootx() + 25
        y += self.widget.winfo_rooty() + 25

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Toplevel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tooltip
        self.tooltip_window = tk.Toplevel(self.widget)
        self.tooltip_window.wm_overrideredirect(True)  # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.tooltip_window.wm_geometry(f"+{x}+{y}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        frame = tk.Frame(self.tooltip_window, bg=self.bg, bd=2, relief=tk.SOLID)
        frame.pack(fill=tk.BOTH, expand=True)

        label = tk.Label(
            frame,
            text=self.text,
            justify="left",
            bg=self.bg,
            fg=self.fg,
            font=self.font,
            wraplength=350,
            padx=10,
            pady=8,
        )
        label.pack()

    def hide_tooltip(self, event=None):
        """‡∏ã‡πà‡∏≠‡∏ô tooltip ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å widget"""
        if self.tooltip_window:
            self.tooltip_window.destroy()
            self.tooltip_window = None


class SimplifiedHotkeyUI:
    """UI ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ"""

    def __init__(self, parent, settings, update_callback):
        self.parent = parent
        self.settings = settings
        self.callback = update_callback
        self.window = None
        self.x = None
        self.y = None
        self.is_showing = False
        self._temp_message = None

        # Initialize theme system
        self.theme = SettingsUITheme

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        self.window_width = 420
        self.window_height = 450

        # StringVars for hotkey entries
        self.toggle_ui_var = tk.StringVar()
        self.start_stop_var = tk.StringVar()
        self.force_translate_var = tk.StringVar()
        self.force_translate_key_var = tk.StringVar()  # ‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force translate keyboard hotkey

    def set_english_keyboard(self):
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"""
        try:
            # ‡πÉ‡∏ä‡πâ LoadKeyboardLayout API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î US English keyboard (0x0409)
            # 0x0409 ‡∏Ñ‡∏∑‡∏≠ US English keyboard layout code
            # 0x0000 ‡∏Ñ‡∏∑‡∏≠ default HKL_NEXT
            user32 = ctypes.WinDLL("user32", use_last_error=True)
            # 0x00000409 ‡∏Ñ‡∏∑‡∏≠ US English keyboard
            result = user32.LoadKeyboardLayoutW("00000409", 0)

            if result:
                print("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ")

            # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ keybd_event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î Alt+Shift ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤
            # ‡∏Å‡∏î ALT
            win32api.keybd_event(win32con.VK_MENU, 0, 0, 0)
            # ‡∏Å‡∏î SHIFT
            win32api.keybd_event(win32con.VK_SHIFT, 0, 0, 0)
            # ‡∏õ‡∏•‡πà‡∏≠‡∏¢ SHIFT
            win32api.keybd_event(win32con.VK_SHIFT, 0, win32con.KEYEVENTF_KEYUP, 0)
            # ‡∏õ‡∏•‡πà‡∏≠‡∏¢ ALT
            win32api.keybd_event(win32con.VK_MENU, 0, win32con.KEYEVENTF_KEYUP, 0)

            return True
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå: {e}")
            return False

    def open(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Hotkey UI"""
        try:
            if not self.window or not self.window.winfo_exists():
                self.create_window()
                self.load_current_hotkeys()
                self.position_window()
            else:
                self.window.deiconify()
                self.position_window()

            self.window.lift()
            self.is_showing = True

            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            self.set_english_keyboard()

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            self.show_temp_message("‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", 2000, "#3498DB")

        except Exception as e:
            print(f"Error opening window: {e}")
            self.show_temp_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", 2000, "#E74C3C")

    def close(self):
        """‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Hotkey UI"""
        try:
            if self.window and self.window.winfo_exists():
                self.window.destroy()
                self.window = None
                self.is_showing = False
            else:
                self.window = None
                self.is_showing = False
        except Exception as e:
            print(f"Error closing window: {e}")

    def create_window(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Hotkey UI ‡πÅ‡∏ö‡∏ö Modern Design"""
        try:
            # ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if self.window and self.window.winfo_exists():
                self.window.destroy()

            self.window = tk.Toplevel(self.parent)
            self.window.title("Hotkey Settings")
            self.window.geometry(f"{self.window_width}x{self.window_height}")  # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
            self.window.overrideredirect(True)
            self.window.configure(bg=self.theme.get_color("bg_primary"))

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
            self.window.protocol("WM_DELETE_WINDOW", self.close)

            # === Modern Title Bar Section ===
            title_frame = tk.Frame(self.window, bg=self.theme.get_color("bg_primary"))
            title_frame.pack(fill=tk.X, pady=(10, 5))

            title_label = tk.Label(
                title_frame,
                text="‚å®Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hotkey",
                bg=self.theme.get_color("bg_primary"),
                fg=self.theme.get_color("text_primary"),
                font=self.theme.get_font("title", "bold"),
            )
            title_label.pack()

            # === Simple Instructions ===
            instructions_frame = tk.Frame(self.window, bg=self.theme.get_color("bg_primary"))
            instructions_frame.pack(fill=tk.X, padx=20, pady=(5, 15))

            # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
            desc_label = tk.Label(
                instructions_frame,
                text="üí° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: F1-F12, A-Z, 0-9, Alt/Ctrl/Shift+‡∏õ‡∏∏‡πà‡∏°",
                bg=self.theme.get_color("bg_primary"),
                fg=self.theme.get_color("accent"),  # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏™‡∏ß‡∏¢‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô
                font=self.theme.get_font("normal", "bold"),
                justify="center",
            )
            desc_label.pack()

            usage_label = tk.Label(
                instructions_frame,
                text="üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ä‡πà‡∏≠‡∏á ‚Üí ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‚Üí Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                bg=self.theme.get_color("bg_primary"),
                fg=self.theme.get_color("text_secondary"),
                font=self.theme.get_font("small"),
                justify="center",
            )
            usage_label.pack(pady=(3, 0))

            # === Hotkey Settings Card with Default Button ===
            hotkey_card = ModernFrame.create_card(self.window, padding="md")
            hotkey_card.pack(fill=tk.X, padx=20, pady=(5, 10))  # ‡∏•‡∏î padding ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô

            # Header frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° Default
            header_frame = tk.Frame(
                hotkey_card, bg=self.theme.get_color("bg_secondary")
            )
            header_frame.pack(fill=tk.X, pady=(0, self.theme.get_spacing("md")))

            # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
            title_label = tk.Label(
                header_frame,
                text="üéÆ ‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å",
                bg=self.theme.get_color("bg_secondary"),
                fg=self.theme.get_color("text_primary"),
                font=self.theme.get_font("medium", "bold"),
            )
            title_label.pack(side=tk.LEFT)

            # ‡∏õ‡∏∏‡πà‡∏° Default ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
            self.default_button = ModernButton.create(
                header_frame, "üîÑ Default", command=self.reset_to_default, width=12
            )
            self.default_button.pack(side=tk.RIGHT)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Default
            ToolTip(self.default_button, "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

            # Separator line
            separator = tk.Frame(
                hotkey_card, height=1, bg=self.theme.get_color("border_light")
            )
            separator.pack(
                fill="x",
                padx=self.theme.get_spacing("md"),
                pady=(0, self.theme.get_spacing("md")),
            )

            # Toggle UI entry
            toggle_frame = tk.Frame(
                hotkey_card, bg=self.theme.get_color("bg_secondary")
            )
            toggle_frame.pack(
                fill=tk.X, pady=self.theme.get_spacing("md")
            )  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            toggle_label = tk.Label(
                toggle_frame,
                text="Toggle Mini UI:",
                bg=self.theme.get_color("bg_secondary"),
                fg=self.theme.get_color("text_primary"),
                font=self.theme.get_font("normal"),
                width=15,
                anchor="w",
            )
            toggle_label.pack(side=tk.LEFT, padx=(0, 15))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            self.toggle_ui_entry = self.create_modern_hotkey_entry(
                toggle_frame, self.toggle_ui_var, "Toggle mini UI:"
            )
            self.toggle_ui_entry.pack(side=tk.RIGHT)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Toggle mini UI
            ToolTip(self.toggle_ui_entry, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ: Alt+L")

            # Start/Stop entry
            start_frame = tk.Frame(hotkey_card, bg=self.theme.get_color("bg_secondary"))
            start_frame.pack(
                fill=tk.X, pady=self.theme.get_spacing("md")
            )  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            start_label = tk.Label(
                start_frame,
                text="Start/Stop:",
                bg=self.theme.get_color("bg_secondary"),
                fg=self.theme.get_color("text_primary"),
                font=self.theme.get_font("normal"),
                width=15,
                anchor="w",
            )
            start_label.pack(side=tk.LEFT, padx=(0, 15))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            self.start_stop_entry = self.create_modern_hotkey_entry(
                start_frame, self.start_stop_var, "Start/Stop:"
            )
            self.start_stop_entry.pack(side=tk.RIGHT)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Start/Stop
            ToolTip(self.start_stop_entry, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ: F9")

            # Force translate key entry (F1-F12 - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ) - ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 3
            force_key_frame = tk.Frame(hotkey_card, bg=self.theme.get_color("bg_secondary"))
            force_key_frame.pack(
                fill=tk.X, pady=self.theme.get_spacing("md")
            )  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            force_key_label = tk.Label(
                force_key_frame,
                text="Force (Key):",
                bg=self.theme.get_color("bg_secondary"),
                fg=self.theme.get_color("text_primary"),
                font=self.theme.get_font("normal"),
                width=15,
                anchor="w",
            )
            force_key_label.pack(side=tk.LEFT, padx=(0, 15))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            self.force_translate_key_entry = self.create_modern_hotkey_entry(
                force_key_frame, self.force_translate_key_var, "Force Key:"
            )
            self.force_translate_key_entry.pack(side=tk.RIGHT)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Force translate key
            ToolTip(self.force_translate_key_entry, "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ: F10")

            # Force translate entry (‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤ - ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ï‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ) - ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
            force_frame = tk.Frame(hotkey_card, bg=self.theme.get_color("bg_secondary"))
            force_frame.pack(
                fill=tk.X, pady=self.theme.get_spacing("md")
            )  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            force_label = tk.Label(
                force_frame,
                text="Force (R-Click TUI):",
                bg=self.theme.get_color("bg_secondary"),
                fg=self.theme.get_color("text_secondary"),  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                font=self.theme.get_font("normal"),
                width=15,
                anchor="w",
            )
            force_label.pack(side=tk.LEFT, padx=(0, 15))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° spacing

            # Entry ‡πÅ‡∏ö‡∏ö disabled ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö r-click
            self.force_translate_entry = tk.Entry(
                force_frame,
                textvariable=self.force_translate_var,
                width=14,
                bg=self.theme.get_color("bg_quaternary"),  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡∏Å‡∏ß‡πà‡∏≤
                fg=self.theme.get_color("text_secondary"),  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
                font=self.theme.get_font("normal"),
                justify="center",
                relief="flat",
                bd=1,
                state="disabled",  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
                highlightthickness=1,
                highlightbackground=self.theme.get_color("border_light"),
            )
            self.force_translate_entry.pack(side=tk.RIGHT)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Force translate r-click
            ToolTip(self.force_translate_entry, "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏• (TUI) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏õ‡∏•")

            # === Close Button with Red Hover Effect ===
            close_button = tk.Button(
                self.window,
                text="‚úï",
                command=self.close,
                bg=self.theme.get_color("bg_secondary"),
                fg=self.theme.get_color("text_primary"),
                activebackground="#FF4444",  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ active
                activeforeground=self.theme.get_color("text_primary"),
                font=self.theme.get_font("normal"),
                relief="flat",
                bd=0,
                width=2,
                height=1,
                cursor="hand2",
            )
            close_button.place(x=8, y=8)

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
            original_bg = self.theme.get_color("bg_secondary")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effect ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Close
            def on_close_enter(event):
                close_button.config(bg="#FF4444")  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

            def on_close_leave(event):
                close_button.config(bg=original_bg)

            # ‡∏ú‡∏π‡∏Å hover events ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            close_button.bind("<Enter>", on_close_enter)
            close_button.bind("<Leave>", on_close_leave)
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Å‡∏±‡∏ö window movement - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ motion events ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            def stop_motion_propagation(event):
                return "break"
            
            close_button.bind("<B1-Motion>", stop_motion_propagation)

            # === Window Movement ===
            self.window.bind("<Button-1>", self.start_move)
            self.window.bind("<ButtonRelease-1>", self.stop_move)
            self.window.bind("<B1-Motion>", self.do_move)

            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö focus ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            self.window.bind("<FocusIn>", lambda e: self.set_english_keyboard())

        except Exception as e:
            print(f"Error creating window: {e}")

    def enforce_english_input(self, event):
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ASCII (‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        if event.char and ord(event.char) > 127:
            self.set_english_keyboard()
            return "break"  # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        return None

    def create_modern_hotkey_entry(self, frame, variable, label_text):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Modern Hotkey Entry Field ‡∏û‡∏£‡πâ‡∏≠‡∏° visual feedback"""
        entry = tk.Entry(
            frame,
            textvariable=variable,
            width=14,
            bg=self.theme.get_color("bg_tertiary"),
            fg=self.theme.get_color("text_primary"),
            insertbackground=self.theme.get_color("text_primary"),
            font=self.theme.get_font("normal"),
            justify="center",
            relief="flat",
            bd=1,
            highlightthickness=2,
            highlightbackground=self.theme.get_color("border_normal"),
            highlightcolor=self.theme.get_color("border_focus"),
        )

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î
        entry.is_listening = False
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ modifier keys ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏≠‡∏¢‡∏π‡πà
        entry.modifiers = set()
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏î
        entry.key_pressed = None

        def on_entry_click(event):
            """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà Entry"""
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
            entry.select_range(0, tk.END)
            entry.focus_set()

            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ focus
            entry.config(bg=self.theme.get_color("hover_light"))

            # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î
            entry.is_listening = True
            entry.delete(0, tk.END)
            entry.insert(0, "‚å®Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°...")

            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            self.set_english_keyboard()

        def on_key_press(event):
            """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î"""
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
            if not entry.is_listening:
                return

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤
            self.enforce_english_input(event)

            key = event.keysym.lower()

            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏î Escape ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            if key == "escape":
                entry.is_listening = False
                entry.delete(0, tk.END)
                entry.insert(0, self.get_original_value(label_text))
                entry.select_clear()
                entry.config(bg=self.theme.get_color("bg_tertiary"))
                self.window.focus_set()
                return "break"

            # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ modifier keys
            modifiers = {
                "control_l",
                "control_r",
                "alt_l",
                "alt_r",
                "shift_l",
                "shift_r",
            }

            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏î modifier key
            if key in modifiers:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
                if "control" in key:
                    entry.modifiers.add("ctrl")
                elif "alt" in key:
                    entry.modifiers.add("alt")
                elif "shift" in key:
                    entry.modifiers.add("shift")

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• modifier ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏≠‡∏¢‡∏π‡πà + visual feedback
                display_text = "+".join(sorted(entry.modifiers))
                if display_text:
                    display_text += "+"
                entry.delete(0, tk.END)
                entry.insert(0, display_text)
                entry.config(bg=self.theme.get_color("success"))  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î modifier

                return "break"

            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° F1-F12
            if key.startswith("f") and key[1:].isdigit() and 1 <= int(key[1:]) <= 12:
                entry.key_pressed = key

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á hotkey ‡∏à‡∏≤‡∏Å modifier + key
                hotkey_parts = list(sorted(entry.modifiers))
                hotkey_parts.append(key)
                hotkey = "+".join(hotkey_parts)

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ + visual feedback
                entry.delete(0, tk.END)
                entry.insert(0, hotkey)
                entry.config(bg=self.theme.get_color("success"))  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

                # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡πÅ‡∏•‡∏∞ inactive entry
                entry.is_listening = False
                entry.modifiers = set()
                entry.key_pressed = None
                entry.config(state=tk.DISABLED)  # inactive entry

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å hotkey
                self.save_single_hotkey(label_text, hotkey)

                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ active entry ‡∏´‡∏•‡∏±‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                self.window.after(
                    1500,
                    lambda: (
                        entry.config(
                            bg=self.theme.get_color("bg_tertiary"), state=tk.NORMAL
                        )
                    ),
                )

                return "break"

            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏Å‡∏©‡∏£ a-z, 0-9
            if (len(key) == 1 and key.isalnum()) or key == "r-click":
                entry.key_pressed = key

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á hotkey ‡∏à‡∏≤‡∏Å modifier + key
                hotkey_parts = list(sorted(entry.modifiers))
                hotkey_parts.append(key)
                hotkey = "+".join(hotkey_parts)

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ + visual feedback
                entry.delete(0, tk.END)
                entry.insert(0, hotkey)
                entry.config(bg=self.theme.get_color("success"))  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

                # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡πÅ‡∏•‡∏∞ inactive entry
                entry.is_listening = False
                entry.modifiers = set()
                entry.key_pressed = None
                entry.config(state=tk.DISABLED)  # inactive entry

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å hotkey
                self.save_single_hotkey(label_text, hotkey)

                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ active entry ‡∏´‡∏•‡∏±‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                self.window.after(
                    1500,
                    lambda: (
                        entry.config(
                            bg=self.theme.get_color("bg_tertiary"), state=tk.NORMAL
                        )
                    ),
                )

                return "break"

            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ hotkey ‡πÉ‡∏ô entry)
            if key == "return":
                current_value = entry.get()
                if (
                    current_value
                    and current_value != "‚å®Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°..."
                    and is_valid_hotkey(current_value)
                ):
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å hotkey + visual feedback
                    entry.config(bg=self.theme.get_color("success"))
                    entry.config(state=tk.DISABLED)  # inactive entry

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å hotkey
                    self.save_single_hotkey(label_text, current_value)

                    # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î
                    entry.is_listening = False
                    entry.modifiers = set()
                    entry.key_pressed = None

                    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ active entry ‡∏´‡∏•‡∏±‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    self.window.after(
                        1500,
                        lambda: (
                            entry.config(
                                bg=self.theme.get_color("bg_tertiary"), state=tk.NORMAL
                            )
                        ),
                    )
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    entry.is_listening = False
                    entry.delete(0, tk.END)
                    entry.insert(0, self.get_original_value(label_text))
                    entry.select_clear()
                    entry.config(bg=self.theme.get_color("bg_tertiary"))
                    self.window.focus_set()

                return "break"

            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            return "break"

        def on_key_release(event):
            """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î"""
            if not entry.is_listening:
                return

            key = event.keysym.lower()

            # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ modifier keys
            modifiers = {
                "control_l",
                "control_r",
                "alt_l",
                "alt_r",
                "shift_l",
                "shift_r",
            }

            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏•‡πà‡∏≠‡∏¢ modifier key
            if key in modifiers:
                # ‡∏•‡∏ö modifier ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                if "control" in key and "ctrl" in entry.modifiers:
                    entry.modifiers.remove("ctrl")
                elif "alt" in key and "alt" in entry.modifiers:
                    entry.modifiers.remove("alt")
                elif "shift" in key and "shift" in entry.modifiers:
                    entry.modifiers.remove("shift")

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• modifier ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏≠‡∏¢‡∏π‡πà
                display_text = "+".join(sorted(entry.modifiers))
                if display_text:
                    display_text += "+"
                entry.delete(0, tk.END)
                entry.insert(0, display_text)

                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ modifier
                if not entry.modifiers:
                    entry.config(bg=self.theme.get_color("hover_light"))

                return "break"

        def on_focus_out(event):
            """‡πÄ‡∏°‡∏∑‡πà‡∏≠ focus ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Entry"""
            entry.select_clear()
            entry.is_listening = False
            entry.config(bg=self.theme.get_color("bg_tertiary"))

            # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°..." ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            if "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°" in entry.get() or not entry.get():
                entry.delete(0, tk.END)
                entry.insert(0, self.get_original_value(label_text))

        # ‡∏ú‡∏π‡∏Å events
        entry.bind("<FocusIn>", on_entry_click)
        entry.bind("<Button-1>", on_entry_click)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÉ‡∏´‡πâ highlight ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        entry.bind("<KeyPress>", on_key_press)
        entry.bind("<KeyRelease>", on_key_release)
        entry.bind("<FocusOut>", on_focus_out)

        # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà entry ‡∏ô‡∏µ‡πâ
        entry.bind(
            "<FocusIn>", lambda e: (on_entry_click(e), self.set_english_keyboard())
        )

        return entry

    def load_current_hotkeys(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ hotkey ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        toggle_ui = self.settings.get_shortcut("toggle_ui", "alt+h")
        start_stop = self.settings.get_shortcut("start_stop_translate", "f9")
        force_translate = self.settings.get_shortcut("force_translate", "r-click")
        force_translate_key = self.settings.get_shortcut("force_translate_key", "f10")  # ‡πÉ‡∏´‡∏°‡πà

        self.toggle_ui_var.set(toggle_ui)
        self.start_stop_var.set(start_stop)
        self.force_translate_var.set(force_translate)
        self.force_translate_key_var.set(force_translate_key)  # ‡πÉ‡∏´‡∏°‡πà

    def reset_to_default(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
        # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        default_values = {
            "toggle_ui": "alt+l",
            "start_stop_translate": "f9", 
            "force_translate": "r-click",
            "force_translate_key": "f10"  # ‡πÉ‡∏´‡∏°‡πà
        }
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô variables
        self.toggle_ui_var.set(default_values["toggle_ui"])
        self.start_stop_var.set(default_values["start_stop_translate"])
        self.force_translate_var.set(default_values["force_translate"])
        self.force_translate_key_var.set(default_values["force_translate_key"])  # ‡πÉ‡∏´‡∏°‡πà

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï entries ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
        if hasattr(self, "toggle_ui_entry"):
            self.toggle_ui_entry.delete(0, tk.END)
            self.toggle_ui_entry.insert(0, default_values["toggle_ui"])
        if hasattr(self, "start_stop_entry"):
            self.start_stop_entry.delete(0, tk.END)
            self.start_stop_entry.insert(0, default_values["start_stop_translate"])
        if hasattr(self, "force_translate_entry"):
            self.force_translate_entry.config(state="normal")  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            self.force_translate_entry.delete(0, tk.END)
            self.force_translate_entry.insert(0, default_values["force_translate"])
            self.force_translate_entry.config(state="disabled")  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏±‡∏ö
        if hasattr(self, "force_translate_key_entry"):  # ‡πÉ‡∏´‡∏°‡πà
            self.force_translate_key_entry.delete(0, tk.END)
            self.force_translate_key_entry.insert(0, default_values["force_translate_key"])

        # *** ‡πÉ‡∏´‡∏°‡πà: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á settings ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ***
        try:
            for key, value in default_values.items():
                self.settings.set_shortcut(key, value)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
            if self.callback:
                self.callback()
                
            # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å focus ‡∏à‡∏≤‡∏Å entry ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            self.clear_entry_focus()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            self.show_temp_message(
                "‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!", 1500, self.theme.get_color("success")
            )
            
        except Exception as e:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            self.show_temp_message(
                f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {str(e)}", 2000, self.theme.get_color("error")
            )

    def start_move(self, event):
        self.x = event.x
        self.y = event.y

    def stop_move(self, event):
        self.x = None
        self.y = None

    def do_move(self, event):
        if self.x is not None and self.y is not None:
            deltax = event.x - self.x
            deltay = event.y - self.y
            x = self.window.winfo_x() + deltax
            y = self.window.winfo_y() + deltay
            # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏Å
            self.window.geometry(f"{self.window_width}x{self.window_height}+{x}+{y}")

    def get_original_value(self, label_text):
        """‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≤‡∏° label"""
        if "Toggle mini UI" in label_text:
            return self.settings.get_shortcut("toggle_ui", "alt+h")
        elif "Start/Stop" in label_text:
            return self.settings.get_shortcut("start_stop_translate", "f9")
        elif "Force Key" in label_text:  # ‡πÉ‡∏´‡∏°‡πà
            return self.settings.get_shortcut("force_translate_key", "f10")
        elif "Force" in label_text:
            return self.settings.get_shortcut("force_translate", "r-click")
        return ""

    def save_single_hotkey(self, label_text, value):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        try:
            if "Toggle mini UI" in label_text:
                self.settings.set_shortcut("toggle_ui", value.lower())
            elif "Start/Stop" in label_text:
                self.settings.set_shortcut("start_stop_translate", value.lower())
            elif "Force Key" in label_text:  # ‡πÉ‡∏´‡∏°‡πà
                self.settings.set_shortcut("force_translate_key", value.lower())
            elif "Force" in label_text:
                self.settings.set_shortcut("force_translate", value.lower())

            if self.callback:
                self.callback()

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            self.show_temp_message("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß!", 1000, self.theme.get_color("success"))
            
            # *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å focus ‡∏à‡∏≤‡∏Å entry ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ***
            self.clear_entry_focus()

        except Exception as e:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            self.show_temp_message(
                f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", 2000, self.theme.get_color("error")
            )
            
    def clear_entry_focus(self):
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å focus ‡∏à‡∏≤‡∏Å entry ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"""
        try:
            # ‡πÉ‡∏´‡πâ focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ó‡∏ô
            self.window.focus_set()
            
            # clear focus ‡∏à‡∏≤‡∏Å entry ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for entry in [self.toggle_ui_entry, self.start_stop_entry, self.force_translate_entry, self.force_translate_key_entry]:  # ‡πÄ‡∏û‡∏¥‡πà‡∏° entry ‡πÉ‡∏´‡∏°‡πà
                if hasattr(self, entry.winfo_name()) and entry.winfo_exists():
                    entry.select_clear()  # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    
        except Exception:
            pass  # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

    def show_temp_message(self, message, duration=1500, color="#4CAF50", font_size=12):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö Modern

        Args:
            message: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
            duration: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á (ms)
            color: ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (success: #4CAF50, error: #F44336, warning: #FF9800)
            font_size: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        """
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if hasattr(self, "_temp_message") and self._temp_message is not None:
            try:
                self._temp_message.destroy()
            except:
                pass

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö Modern
        self._temp_message = tk.Label(
            self.window,
            text=message,
            bg=color,
            fg=self.theme.get_color("text_primary"),
            font=self.theme.get_font("normal"),
            padx=self.theme.get_spacing("md"),
            pady=self.theme.get_spacing("sm"),
            relief="flat",
            bd=0,
        )
        self._temp_message.place(relx=0.5, rely=0.92, anchor="center")

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        self.window.after(duration, self._hide_temp_message)

    def _hide_temp_message(self):
        """‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"""
        if hasattr(self, "_temp_message") and self._temp_message is not None:
            self._temp_message.destroy()
            self._temp_message = None

    def position_window(self):
        """‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á settings"""
        if self.parent and self.window:
            # ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á parent (settings window)
            parent_x = self.parent.winfo_x()
            parent_y = self.parent.winfo_y()
            parent_width = self.parent.winfo_width()

            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
            new_x = parent_x + parent_width + 10  # ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤ 10 pixels
            new_y = parent_y  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö parent

            # ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö create_window()
            self.window.geometry(
                f"{self.window_width}x{self.window_height}+{new_x}+{new_y}"
            )
