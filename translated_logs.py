"""
Translated Logs Module - Enhanced Chat-style Translation History Display

Version: 2.1.0
Author: MBB_PROJECT Team
Last Updated: 2025-07-18

Features:
- Smart Cache System for message replacement
- Position Lock System with instant toggle
- Font Management with real-time updates
- Flat design UI with minimal colors
- Performance optimized scrolling and animations
- Custom scrollbar and hover effects
"""

import tkinter as tk
from tkinter import BooleanVar
import os
import logging
from asset_manager import AssetManager
import time
import hashlib
from PIL import ImageTk, Image
from appearance import appearance_manager
from settings import Settings
import win32gui
from ctypes import windll
from font_manager import FontSettings, FontManager, FontUI, FontUIManager

# ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ monitor position
try:
    import win32api
    import win32con

    HAS_WIN32 = True
except ImportError:
    HAS_WIN32 = False
    print("Warning: win32api not available, using fallback positioning for Logs UI")

logging.basicConfig(level=logging.ERROR)

# --- Design System Constants ---
FONT_FAMILY = "Bai Jamjuree"
SINGLE_BUBBLE_COLOR = "#1C1C1C"


class LightweightChatBubble(tk.Frame):
    """
    Lightweight Chat Bubble widget using tk.Frame and tk.Label for optimal performance
    """

    def __init__(
        self,
        parent,
        speaker,
        message,
        speaker_color,
        bubble_color,
        font_size,
        max_width,
        font_family=FONT_FAMILY,
    ):
        super().__init__(parent, bg=bubble_color)

        self.speaker_label = None
        self.message_label = None
        self._last_wrap_width = max_width - 24  # Track wrapping state

        # Create labels for speaker and message
        if speaker:
            self.speaker_label = tk.Label(
                self,
                text=speaker,
                font=(font_family, font_size, "bold"),
                fg=speaker_color,
                bg=bubble_color,
                justify="left",
                anchor="w",
            )
            self.speaker_label.pack(fill="x", expand=True, padx=12, pady=(8, 0))

        self.message_label = tk.Label(
            self,
            text=message,
            font=(font_family, font_size),
            fg="#FFFFFF",
            bg=bubble_color,
            justify="left",
            wraplength=max_width - 24,
            anchor="w",
        )
        message_pady = (4, 10) if speaker else (8, 10)
        self.message_label.pack(fill="x", expand=True, padx=12, pady=message_pady)

        self.bind("<Configure>", self._on_resize)

    def _on_resize(self, event):
        """Update wraplength when bubble size changes"""
        new_width = event.width - 24  # -24 for left/right padding
        if new_width > 0:
            self.message_label.config(wraplength=new_width)
            self._last_wrap_width = new_width

    def update_font_size(self, new_size, font_family=None):
        """Update font size and family for all labels"""
        if font_family is None:
            font_family = FONT_FAMILY

        if self.speaker_label:
            self.speaker_label.config(font=(font_family, new_size, "bold"))
        self.message_label.config(font=(font_family, new_size))

    def check_wrap_changed(self):
        """Check if text wrapping changed significantly (for repack decision)"""
        current_width = self.winfo_width() - 24
        if current_width <= 0:
            return False
        # Consider repack needed if width changed by more than 20%
        return abs(current_width - self._last_wrap_width) > (
            self._last_wrap_width * 0.2
        )


class Translated_Logs:
    """Main class for enhanced chat-style translation logs with smart animations and font management"""

    def __init__(self, root, settings, on_close_callback=None, main_app=None):
        self.root = root
        self.settings = settings
        self.on_close_callback = on_close_callback
        self.main_app = main_app  # ‡πÄ‡∏û‡∏¥‡πà‡∏° reference ‡∏Ç‡∏≠‡∏á main app

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock
        self.is_position_locked = False
        self.locked_geometry = None
        self._last_save_time = 0  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö throttling

        # Main state variables
        self.is_visible = False
        self.is_ui_locked = False
        self._is_first_show = True

        # Transparency settings
        self.normal_alpha = 0.95
        self.transparent_alpha = 0.7
        self.super_transparent = 0.5
        self.solid_alpha = 1.0
        self.current_mode = "A"

        # Bubble and font settings
        self.bubble_list = []
        self.current_font_size = 11

        # Animation state
        self._scroll_animation_id = None

        # Reverse mode
        self.reverse_mode = BooleanVar(
            value=self.settings.get("logs_reverse_mode", False)
        )

        # Smart Message Cache System
        self.message_cache = (
            {}
        )  # {message_hash: {'text': str, 'speaker': str, 'timestamp': float, 'bubble_index': int}}
        self.last_message_hash = None
        self.enable_smart_replacement = True

        # Font Management System
        self.font_manager = FontManager(os.path.dirname(__file__))
        self.font_settings = FontSettings(self.settings)
        self.font_settings.add_observer(self)
        self.current_font_family = self.font_settings.font_name

        # Initialize UI components
        self.setup_ui()
        self.load_settings()
        self.root.withdraw()
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å rounded corners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flat design
        # self.root.after(100, self.apply_rounded_corners_to_ui)

        logging.info("‚úÖ Modern Chat Logs initialized with Smart Cache System!")
        logging.info(f"Initial geometry: {self.root.geometry()}")
        logging.info(
            f"Smart Replacement: {'‡πÄ‡∏õ‡∏¥‡∏î' if self.enable_smart_replacement else '‡∏õ‡∏¥‡∏î'}"
        )
        logging.info(
            f"Font: {self.current_font_family}, Size: {self.current_font_size}"
        )
        logging.info(f"_is_first_show: {self._is_first_show}")

    def on_font_changed(self, font_name: str, font_size: int):
        """‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å FontSettings ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå"""
        logging.info(f"üé® Font changed to: {font_name}, size: {font_size}")
        self.current_font_family = font_name
        # ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô font_size ‡∏à‡∏≤‡∏Å font_manager ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏≠‡∏á
        self._update_all_fonts()

    def hide_window(self):
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock)
        if self.is_position_locked:
            self.locked_geometry = self.root.geometry()
            self.save_locked_position()
            print(
                f"Lock mode: Saved final position before hiding: {self.locked_geometry}"
            )

        self.root.withdraw()
        self.is_visible = False

        # Call callback to notify main UI
        if self.on_close_callback:
            try:
                self.on_close_callback()
                logging.info("Called on_close_callback to notify main UI.")
            except Exception as e:
                logging.error(f"Error executing on_close_callback: {e}")

    def setup_ui(self):
        """Create main UI with chat interface - flat design"""
        self.root.title("Conversation History")
        self.root.overrideredirect(True)
        self.root.attributes("-topmost", True)

        self.content_frame = tk.Frame(
            self.root, bg=appearance_manager.bg_color, bd=0, highlightthickness=0
        )
        self.content_frame.pack(fill=tk.BOTH, expand=True)

        # Setup UI components in order
        self.setup_header()
        self.setup_bottom_controls()
        self.setup_chat_area()

        self.setup_resize_handle()
        self.setup_bindings()

    def setup_header(self):
        """Create header with font size controls"""
        header_frame = tk.Frame(
            self.content_frame, bg=appearance_manager.bg_color, height=35
        )
        header_frame.pack(side=tk.TOP, fill=tk.X, pady=(0, 5))
        header_frame.pack_propagate(False)

        self.title_label = tk.Label(
            header_frame,
            text="üí¨ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤",
            font=(FONT_FAMILY, 12, "bold"),
            fg="#38bdf8",
            bg=appearance_manager.bg_color,
        )
        self.title_label.pack(side=tk.LEFT, padx=12, pady=8)

        controls_frame = tk.Frame(header_frame, bg=appearance_manager.bg_color)
        controls_frame.pack(side=tk.RIGHT, padx=8)

        font_frame = tk.Frame(controls_frame, bg=appearance_manager.bg_color)
        font_frame.pack(side=tk.LEFT, padx=(0, 5))

        font_minus_btn = tk.Button(
            font_frame,
            text="‚àí",
            command=self._decrease_font_size,
            font=(FONT_FAMILY, 14, "bold"),
            fg=appearance_manager.fg_color,
            bg=appearance_manager.bg_color,
            bd=0,
            padx=6,
            pady=0,
            cursor="hand2",
            width=2,
            highlightthickness=0,
            activebackground=appearance_manager.darken_color(
                appearance_manager.bg_color, 0.3
            ),
            activeforeground="#B0B0B0",
        )
        font_minus_btn.pack(side=tk.LEFT, padx=(0, 1))
        self._add_hover_effect(font_minus_btn)

        self.font_size_label = tk.Label(
            font_frame,
            text=str(self.current_font_size),
            font=(FONT_FAMILY, 9),
            fg="#888888",
            bg=appearance_manager.bg_color,
            width=3,
        )
        self.font_size_label.pack(side=tk.LEFT, padx=1)

        font_plus_btn = tk.Button(
            font_frame,
            text="+",
            command=self._increase_font_size,
            font=(FONT_FAMILY, 12, "bold"),
            fg=appearance_manager.fg_color,
            bg=appearance_manager.bg_color,
            bd=0,
            padx=6,
            pady=0,
            cursor="hand2",
            width=2,
            highlightthickness=0,
            activebackground=appearance_manager.darken_color(
                appearance_manager.bg_color, 0.3
            ),
            activeforeground="#B0B0B0",
        )
        font_plus_btn.pack(side=tk.LEFT, padx=(1, 0))
        self._add_hover_effect(font_plus_btn)

        hide_btn = tk.Button(
            controls_frame,
            text="‚úï",
            command=self.hide_window,
            font=("Tahoma", 10, "bold"),
            fg="#ff6b6b",
            bg=appearance_manager.bg_color,
            bd=0,
            padx=6,
            pady=2,
            cursor="hand2",
            highlightthickness=0,
            activebackground="#ff6b6b",
            activeforeground="white",
        )
        hide_btn.pack(side=tk.RIGHT, padx=(8, 0))

        def on_hide_enter(e):
            hide_btn.configure(bg="#ff6b6b", fg="white")

        def on_hide_leave(e):
            hide_btn.configure(bg=appearance_manager.bg_color, fg="#ff6b6b")

        hide_btn.bind("<Enter>", on_hide_enter)
        hide_btn.bind("<Leave>", on_hide_leave)

        self._bind_drag_to_widget(header_frame)
        self._bind_drag_to_widget(self.title_label)
        self._bind_drag_to_widget(font_frame)
        self._bind_drag_to_widget(self.font_size_label)

    def _add_hover_effect(self, button):
        """Add hover effect to button"""

        def on_enter(e):
            button.configure(
                bg=appearance_manager.darken_color(appearance_manager.bg_color, 0.3),
                fg="#B0B0B0",
            )

        def on_leave(e):
            button.configure(
                bg=appearance_manager.bg_color, fg=appearance_manager.fg_color
            )

        button.bind("<Enter>", on_enter)
        button.bind("<Leave>", on_leave)

    def _increase_font_size(self):
        """Increase font size by 1pt (max 28pt)"""
        if self.current_font_size < 28:
            self.current_font_size += 1
            self._update_all_fonts()
            self._update_font_display()

    def _decrease_font_size(self):
        """Decrease font size by 1pt (min 10pt)"""
        if self.current_font_size > 10:
            self.current_font_size -= 1
            self._update_all_fonts()
            self._update_font_display()

    def _update_all_fonts(self, font_family_override=None):
        """Update fonts smartly - only repack if wrapping changed significantly"""
        try:
            # ‡πÉ‡∏ä‡πâ font family ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ current font family
            font_family = font_family_override or self.current_font_family

            logging.info(f"üîÑ _update_all_fonts called with: {font_family_override}")
            logging.info(f"üìù Using font family: {font_family}")
            logging.info(f"üìä Total bubbles to update: {len(self.bubble_list)}")

            # Update font size for all bubbles
            for i, bubble in enumerate(self.bubble_list):
                bubble.update_font_size(self.current_font_size, font_family)
                if i < 3:  # Log first 3 bubbles
                    logging.info(f"   Updated bubble {i+1} with font: {font_family}")

            # Check if any bubble wrapping changed significantly
            needs_repack = False
            for bubble in self.bubble_list:
                if bubble.check_wrap_changed():
                    needs_repack = True
                    break

            if needs_repack:
                logging.info(
                    "Font change caused significant layout change - repacking bubbles"
                )
                self.root.after(20, self._repack_bubbles)
            else:
                logging.info("Font updated without layout changes - no repack needed")

        except Exception as e:
            logging.error(f"Error updating fonts: {e}")
            import traceback

            traceback.print_exc()

    def _update_font_display(self):
        """Update font size display"""
        if hasattr(self, "font_size_label"):
            self.font_size_label.config(text=str(self.current_font_size))

    def _bind_drag_to_widget(self, widget):
        """Add drag binding to widget"""
        widget.bind("<Button-1>", self.start_move)
        widget.bind("<B1-Motion>", self.do_move)
        widget.bind("<ButtonRelease-1>", self.stop_move)

    def setup_chat_area(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà chat ‡∏û‡∏£‡πâ‡∏≠‡∏° custom scrollbar ‡πÅ‡∏•‡∏∞ mouse wheel - flat design"""
        chat_frame = tk.Frame(self.content_frame, bg=appearance_manager.bg_color)
        chat_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.canvas = tk.Canvas(
            chat_frame, bg=appearance_manager.bg_color, highlightthickness=0, bd=0
        )
        self.setup_custom_scrollbar(chat_frame)
        self.scrollable_frame = tk.Frame(self.canvas, bg=appearance_manager.bg_color)
        self.canvas.configure(yscrollcommand=self.scrollbar_update)

        self.scrollbar_canvas.pack(side="right", fill="y", padx=(2, 0))
        self.canvas.pack(side="left", fill="both", expand=True)

        self.canvas_frame_id = self.canvas.create_window(
            0, 0, window=self.scrollable_frame, anchor="nw"
        )

        self.scrollable_frame.bind("<Configure>", self._on_frame_configure)
        self.canvas.bind("<Configure>", self._on_canvas_configure)

        self.setup_mouse_wheel_support()

        self._bind_drag_to_widget(chat_frame)
        self._bind_drag_to_widget(self.canvas)
        self._bind_drag_to_widget(self.scrollable_frame)

    def setup_mouse_wheel_support(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° mouse wheel support ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        self.canvas.bind("<MouseWheel>", self._on_mousewheel)
        self.scrollable_frame.bind("<MouseWheel>", self._on_mousewheel)
        self.scrollbar_canvas.bind("<MouseWheel>", self._on_mousewheel)
        self.content_frame.bind("<MouseWheel>", self._on_mousewheel)

        def propagate_wheel(event):
            self._on_mousewheel(event)

        self.root.bind("<MouseWheel>", propagate_wheel)

    def setup_custom_scrollbar(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á custom scrollbar ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô"""
        scrollbar_width = 8
        self.scrollbar_canvas = tk.Canvas(
            parent,
            width=scrollbar_width,
            height=100,
            bg=appearance_manager.bg_color,
            highlightthickness=0,
            bd=0,
        )

        thumb_color = "#555555"
        self.scrollbar_thumb = self.scrollbar_canvas.create_rectangle(
            1, 0, scrollbar_width - 1, 50, fill=thumb_color, outline="", tags=("thumb",)
        )

        self.scrollbar_canvas.bind("<Button-1>", self._on_scrollbar_click)
        self.scrollbar_canvas.bind("<B1-Motion>", self._on_scrollbar_drag)

        def on_scroll_enter(e):
            self.scrollbar_canvas.itemconfig(self.scrollbar_thumb, fill="#777777")

        def on_scroll_leave(e):
            self.scrollbar_canvas.itemconfig(self.scrollbar_thumb, fill=thumb_color)

        self.scrollbar_canvas.bind("<Enter>", on_scroll_enter)
        self.scrollbar_canvas.bind("<Leave>", on_scroll_leave)

    def scrollbar_update(self, start, end):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó custom scrollbar"""
        try:
            start, end = float(start), float(end)
            canvas_height = self.scrollbar_canvas.winfo_height()
            thumb_height = max(20, canvas_height * (end - start))
            y_position = start * canvas_height
            self.scrollbar_canvas.coords(
                self.scrollbar_thumb, 1, y_position, 7, y_position + thumb_height
            )
            self.scrollbar_canvas.itemconfig(
                self.scrollbar_thumb,
                state="normal" if not (start <= 0.01 and end >= 0.99) else "hidden",
            )
        except Exception as e:
            logging.error(f"Error updating scrollbar: {e}")

    def _on_scrollbar_click(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å scrollbar"""
        try:
            self.canvas.yview_moveto(event.y / self.scrollbar_canvas.winfo_height())
        except Exception as e:
            logging.error(f"Error in scrollbar click: {e}")

    def _on_scrollbar_drag(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å scrollbar"""
        try:
            self.canvas.yview_moveto(
                max(0, min(1, event.y / self.scrollbar_canvas.winfo_height()))
            )
        except Exception as e:
            logging.error(f"Error in scrollbar drag: {e}")

    def setup_bottom_controls(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á controls ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô"""
        bottom_frame = tk.Frame(
            self.content_frame, bg=appearance_manager.bg_color, height=30
        )
        bottom_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 0))
        bottom_frame.pack_propagate(False)

        left_frame = tk.Frame(bottom_frame, bg=appearance_manager.bg_color)
        left_frame.pack(side=tk.LEFT, padx=5)

        self.setup_lock_button(left_frame)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° lock ‡∏Å‡πà‡∏≠‡∏ô
        self.setup_transparency_button(left_frame)
        self.setup_reverse_button(left_frame)
        self.setup_smart_button(left_frame)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° smart replacement
        self.setup_font_button(left_frame)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° font manager

        right_frame = tk.Frame(bottom_frame, bg=appearance_manager.bg_color)
        right_frame.pack(
            side=tk.RIGHT, padx=(5, 105)
        )  # ‡πÄ‡∏û‡∏¥‡πà‡∏° margin ‡∏Ç‡∏ß‡∏≤ 100px ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô resize

        self.status_label = tk.Label(
            right_frame,
            text="Ready",
            font=("Tahoma", 8),
            fg="#888888",
            bg=appearance_manager.bg_color,
        )
        self.status_label.pack(pady=6)

        self._bind_drag_to_widget(bottom_frame)
        self._bind_drag_to_widget(left_frame)
        self._bind_drag_to_widget(right_frame)
        self._bind_drag_to_widget(self.status_label)

    def setup_lock_button(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° lock/unlock ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô"""
        try:
            # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
            unlock_icon_path = os.path.join(os.path.dirname(__file__), "white_lock.png")
            lock_icon_path = os.path.join(os.path.dirname(__file__), "BG_lock.png")

            if os.path.exists(unlock_icon_path):
                self.unlock_icon = AssetManager.load_icon("unlock.png", (16, 16))
            else:
                self.unlock_icon = None

            if os.path.exists(lock_icon_path):
                self.lock_icon = AssetManager.load_icon("BG_lock.png", (16, 16))
            else:
                self.lock_icon = None

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô unlock)
            if self.unlock_icon:
                lock_btn = tk.Button(
                    parent,
                    image=self.unlock_icon,
                    command=self.toggle_position_lock,
                    bg=appearance_manager.bg_color,
                    bd=0,
                    padx=4,
                    cursor="hand2",
                    highlightthickness=0,
                )
            else:
                # Fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                lock_btn = tk.Button(
                    parent,
                    text="üîì",
                    command=self.toggle_position_lock,
                    font=("Arial", 11),
                    fg="#888888",
                    bg=appearance_manager.bg_color,
                    bd=0,
                    padx=4,
                    cursor="hand2",
                    highlightthickness=0,
                )

            lock_btn.pack(side=tk.LEFT, padx=2)
            self.lock_button = lock_btn
            self._add_hover_effect(lock_btn)

        except Exception as e:
            logging.error(f"Error setting up lock button: {e}")
            # Fallback button
            lock_btn = tk.Button(
                parent,
                text="üîì",
                command=self.toggle_position_lock,
                font=("Arial", 11),
                fg="#888888",
                bg=appearance_manager.bg_color,
                bd=0,
                padx=4,
                cursor="hand2",
            )
            lock_btn.pack(side=tk.LEFT, padx=2)
            self.lock_button = lock_btn

    def toggle_position_lock(self):
        """Toggle ‡∏Å‡∏≤‡∏£ lock/unlock ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Log UI - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        try:
            self.is_position_locked = not self.is_position_locked

            if self.is_position_locked:
                # Lock: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                current_geometry = self.root.geometry()
                self.locked_geometry = current_geometry

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á settings ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                self.settings.set_logs_settings(
                    width=self.root.winfo_width(),
                    height=self.root.winfo_height(),
                    x=self.root.winfo_x(),
                    y=self.root.winfo_y(),
                )
                self.settings.set("logs_position_locked", True)
                self.settings.set("logs_locked_geometry", current_geometry)

                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô lock
                if hasattr(self, "lock_icon") and self.lock_icon:
                    self.lock_button.config(image=self.lock_icon)
                else:
                    self.lock_button.config(text="üîí", fg="#FF6B6B")

                print(
                    f"position+UI Saved! at: {current_geometry} - will auto-save any changes"
                )
                self.status_label.config(text="position+UI Saved!", fg="#FF6B6B")

            else:
                # Unlock: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå flag ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                self.locked_geometry = None
                self.settings.set("logs_position_locked", False)
                self.settings.set("logs_locked_geometry", "")  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
                self.settings.clear_logs_position_cache()  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå cache ‡∏´‡∏•‡∏±‡∏Å

                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô unlock
                if hasattr(self, "unlock_icon") and self.unlock_icon:
                    self.lock_button.config(image=self.unlock_icon)
                else:
                    self.lock_button.config(text="üîì", fg="#888888")

                print("Position UNLOCKED - will use smart positioning on next show")
                self.status_label.config(text="Smart Mode", fg="#888888")

                # ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å _apply_smart_positioning() ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô UI ‡∏´‡∏≤‡∏¢
                # smart positioning ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î UI

        except Exception as e:
            logging.error(f"Error toggling position lock: {e}")

    def setup_reverse_button(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° reverse ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô swap.png"""
        try:
            icon_path = os.path.join(os.path.dirname(__file__), "swap.png")
            if os.path.exists(icon_path):
                self.swap_icon = AssetManager.load_icon("swap.png", (16, 16))
                reverse_btn = tk.Button(
                    parent,
                    image=self.swap_icon,
                    command=self.toggle_reverse_mode,
                    bg=appearance_manager.bg_color,
                    bd=0,
                    padx=4,
                    cursor="hand2",
                    highlightthickness=0,
                )
            else:
                reverse_btn = tk.Button(
                    parent,
                    text="‚Üï",
                    command=self.toggle_reverse_mode,
                    font=("Arial", 11),
                    fg=self._get_reverse_color(),
                    bg=appearance_manager.bg_color,
                    bd=0,
                    padx=4,
                    cursor="hand2",
                    highlightthickness=0,
                )
            reverse_btn.pack(side=tk.LEFT, padx=2)
            self.reverse_button = reverse_btn
            self._add_hover_effect(reverse_btn)
        except Exception as e:
            logging.error(f"Error setting up reverse button: {e}")
            reverse_btn = tk.Button(
                parent,
                text="‚Üï",
                command=self.toggle_reverse_mode,
                font=("Arial", 11),
                fg=self._get_reverse_color(),
                bg=appearance_manager.bg_color,
                bd=0,
                padx=4,
                cursor="hand2",
            )
            reverse_btn.pack(side=tk.LEFT, padx=2)
            self.reverse_button = reverse_btn

    def setup_smart_button(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° toggle smart replacement mode - minimal flat design"""
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            smart_btn = tk.Button(
                parent,
                text=self._get_smart_icon(),
                command=self.toggle_smart_replacement,
                font=("Arial", 10, "bold"),
                fg=self._get_smart_color_flat(),
                bg=appearance_manager.bg_color,
                bd=1,
                padx=6,
                pady=2,
                cursor="hand2",
                highlightthickness=0,
                relief="solid",
                highlightcolor="#666666",
                highlightbackground="#666666",
            )
            smart_btn.pack(side=tk.LEFT, padx=2)
            self.smart_button = smart_btn
            self._add_hover_effect(smart_btn)
        except Exception as e:
            logging.error(f"Error setting up smart button: {e}")
            # Fallback button
            smart_btn = tk.Button(
                parent,
                text="S",
                command=self.toggle_smart_replacement,
                font=("Tahoma", 10),
                fg=self._get_smart_color_flat(),
                bg=appearance_manager.bg_color,
                bd=1,
                padx=4,
                cursor="hand2",
                relief="solid",
            )
            smart_btn.pack(side=tk.LEFT, padx=2)
            self.smart_button = smart_btn

    def _get_smart_icon(self):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ smart mode"""
        return "ON" if self.enable_smart_replacement else "OFF"

    def _get_smart_color_flat(self):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏° smart ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - flat design"""
        return "#FFFFFF" if self.enable_smart_replacement else "#888888"

    def setup_font_button(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° font manager - minimal flat design"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Font" ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß F
            font_btn = tk.Button(
                parent,
                text="Font",
                command=self.open_font_manager,
                font=("Arial", 9, "bold"),
                fg="#888888",
                bg=appearance_manager.bg_color,
                bd=1,
                padx=4,
                pady=2,
                cursor="hand2",
                highlightthickness=0,
                relief="solid",
                highlightcolor="#666666",
                highlightbackground="#666666",
            )
            font_btn.pack(side=tk.LEFT, padx=2)
            self.font_button = font_btn
            self._add_hover_effect(font_btn)
        except Exception as e:
            logging.error(f"Error setting up font button: {e}")
            # Fallback button
            font_btn = tk.Button(
                parent,
                text="Font",
                command=self.open_font_manager,
                font=("Tahoma", 9),
                fg="#888888",
                bg=appearance_manager.bg_color,
                bd=1,
                padx=3,
                cursor="hand2",
                relief="solid",
            )
            font_btn.pack(side=tk.LEFT, padx=2)
            self.font_button = font_btn

    def open_font_manager(self):
        """‡πÄ‡∏õ‡∏¥‡∏î Font Manager window ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô"""
        try:
            # ‡πÉ‡∏ä‡πâ FontUIManager
            font_ui_manager = FontUIManager.get_instance()

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå
            def apply_font_callback(font_data):
                """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà"""
                font_name = font_data.get("font", "Bai Jamjuree")
                font_size = font_data.get("font_size", 16)
                target = font_data.get("target", "translated_ui")

                logging.info(f"Font applied to translated_logs: {font_name}")

                # *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Apply ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ target ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ***
                if target == "translated_logs":
                    # Apply to self ONLY
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï current font family
                    self.current_font_family = font_name
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï font ‡πÉ‡∏ô bubbles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    self._update_all_fonts(font_name)
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å settings
                    self.save_settings()
                    logging.info(f"Font applied to Translation Logs: {font_name}")

                elif target == "translated_ui":
                    # Apply to translated_ui ONLY
                    logging.info("üìå Applying to translated_ui ONLY...")
                    try:
                        if (
                            self.main_app
                            and hasattr(self.main_app, "translated_ui")
                            and self.main_app.translated_ui
                        ):
                            # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ font ‡πÑ‡∏õ‡∏¢‡∏±‡∏á translated_ui (‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ font_name)
                            if hasattr(self.main_app.translated_ui, "update_font"):
                                self.main_app.translated_ui.update_font(font_name)
                                logging.info(
                                    f"‚úÖ Font applied to Translation UI: {font_name}"
                                )
                            else:
                                logging.warning(
                                    "‚ö†Ô∏è translated_ui does not have update_font method"
                                )
                                if hasattr(self, "status_label"):
                                    self.status_label.config(
                                        text="UI update method not found", fg="#FF6B6B"
                                    )
                                    self.root.after(3000, lambda: self._update_status())
                        else:
                            logging.warning("‚ö†Ô∏è Cannot find translated_ui to apply font")
                            if hasattr(self, "status_label"):
                                self.status_label.config(
                                    text="Translated UI not found", fg="#FF6B6B"
                                )
                                self.root.after(3000, lambda: self._update_status())
                    except Exception as e:
                        logging.error(f"Error applying font to translated_ui: {e}")
                        if hasattr(self, "status_label"):
                            self.status_label.config(
                                text="Font apply error", fg="#FF6B6B"
                            )
                            self.root.after(3000, lambda: self._update_status())
                else:
                    logging.info(f"‚è© Unknown target: {target}")

                logging.info(f"‚úÖ Font callback completed for target: {target}")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á FontUI instance ‡∏ú‡πà‡∏≤‡∏ô FontUIManager
            font_ui = font_ui_manager.get_or_create_font_ui(
                self.root, self.font_manager, self.settings, apply_font_callback
            )

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å open_font_ui ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á UI
            font_ui.open_font_ui()

            logging.info("üìù Opened Font Manager successfully")

        except Exception as e:
            logging.error(f"Error opening font manager: {e}")
            # ‡πÅ‡∏™‡∏î‡∏á error message
            if hasattr(self, "status_label"):
                self.status_label.config(text="Font Manager Error", fg="#FF6B6B")
                self.root.after(3000, lambda: self._update_status())

    def setup_transparency_button(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° transparency ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô trans.png"""
        try:
            icon_path = os.path.join(os.path.dirname(__file__), "trans.png")
            if os.path.exists(icon_path):
                self.trans_icon = AssetManager.load_icon("trans.png", (16, 16))
                trans_btn = tk.Button(
                    parent,
                    image=self.trans_icon,
                    command=self.toggle_transparency,
                    bg=appearance_manager.bg_color,
                    bd=0,
                    padx=4,
                    cursor="hand2",
                    highlightthickness=0,
                )
            else:
                trans_btn = tk.Button(
                    parent,
                    text="üëÅ",
                    command=self.toggle_transparency,
                    font=("Segoe UI Symbol", 12),
                    fg=appearance_manager.fg_color,
                    bg=appearance_manager.bg_color,
                    bd=0,
                    padx=4,
                    cursor="hand2",
                    highlightthickness=0,
                )
            trans_btn.pack(side=tk.LEFT, padx=2)
            self.trans_button = trans_btn
            self._add_hover_effect(trans_btn)
        except Exception as e:
            logging.error(f"Error setting up transparency button: {e}")
            trans_btn = tk.Button(
                parent,
                text="T",
                command=self.toggle_transparency,
                font=("Tahoma", 10),
                fg=appearance_manager.fg_color,
                bg=appearance_manager.bg_color,
                bd=0,
                padx=4,
                cursor="hand2",
            )
            trans_btn.pack(side=tk.LEFT, padx=2)

    def setup_resize_handle(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á resize handle ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô resize.png"""
        try:
            icon_path = os.path.join(os.path.dirname(__file__), "resize.png")
            if os.path.exists(icon_path):
                self.resize_icon = AssetManager.load_icon("resize.png", (16, 16))
                self.resize_handle = tk.Label(
                    self.content_frame,
                    image=self.resize_icon,
                    bg=appearance_manager.bg_color,
                    cursor="arrow",
                )
            else:
                self.resize_handle = tk.Label(
                    self.content_frame,
                    text="‚ãÆ‚ãÆ",
                    font=("Arial", 8),
                    fg=appearance_manager.darken_color(
                        appearance_manager.fg_color, 0.6
                    ),
                    bg=appearance_manager.bg_color,
                    cursor="arrow",
                )
            self.resize_handle.place(relx=1.0, rely=1.0, anchor="se", x=-1, y=-1)
            self.resize_handle.bind("<Double-1>", lambda e: self.toggle_lock_ui())
            self.resize_handle.bind("<Button-1>", self.start_resize)
            self.resize_handle.bind("<B1-Motion>", self.do_resize)
            self.resize_handle.bind("<ButtonRelease-1>", self.stop_resize)
        except Exception as e:
            logging.error(f"Error setting up resize handle: {e}")

    def setup_bindings(self):
        """Setup event bindings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á"""
        self._bind_drag_to_widget(self.content_frame)
        logging.info("‚úÖ Enhanced drag bindings setup complete!")

    def _get_reverse_color(self):
        return "#00BFFF" if self.reverse_mode.get() else appearance_manager.fg_color

    def _on_frame_configure(self, event=None):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def _on_canvas_configure(self, event=None):
        canvas_width = self.canvas.winfo_width()
        self.canvas.itemconfig(self.canvas_frame_id, width=canvas_width)

    def _on_mousewheel(self, event):
        self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

    def _generate_message_hash(self, text, speaker=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô cache key"""
        # ‡πÉ‡∏ä‡πâ text + speaker + timestamp (‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÄ‡∏õ‡πá‡∏ô key
        timestamp_rounded = int(time.time() // 10) * 10
        hash_source = f"{text.strip()}_{speaker or ''}_{timestamp_rounded}"
        return hashlib.md5(hash_source.encode()).hexdigest()[:12]

    def _is_likely_retranslation(self, new_text, cached_text):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        if not cached_text or not new_text:
            return False

        # ‡∏•‡∏ö speaker prefix ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        new_content = new_text.split(": ", 1)[-1] if ": " in new_text else new_text
        cached_content = (
            cached_text.split(": ", 1)[-1] if ": " in cached_text else cached_text
        )

        # Debug log
        logging.info(
            f"üîç Comparing: NEW='{new_content[:50]}...' vs CACHED='{cached_content[:50]}...'"
        )

        # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô = ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ã‡πâ‡∏≥
        len_ratio = min(len(new_content), len(cached_content)) / max(
            len(new_content), len(cached_content)
        )
        logging.info(f"üîç Length ratio: {len_ratio:.2f}")

        if len_ratio > 0.3:  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.4 ‡πÄ‡∏õ‡πá‡∏ô 0.3 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏ß‡∏°‡∏Å‡∏ß‡πà‡∏≤
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
            words_new = set(new_content.lower().split())
            words_cached = set(cached_content.lower().split())
            if len(words_new) > 0 and len(words_cached) > 0:
                common_ratio = len(words_new & words_cached) / max(
                    len(words_new), len(words_cached)
                )
                logging.info(f"üîç Common words ratio: {common_ratio:.2f}")
                result = common_ratio > 0.2  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.25 ‡πÄ‡∏õ‡πá‡∏ô 0.2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏ß‡∏°‡∏Å‡∏ß‡πà‡∏≤
                logging.info(f"üîç Is retranslation: {result}")
                return result

        logging.info(f"üîç Is retranslation: False (length ratio too low)")
        return False

    def _replace_last_message(self, new_text, is_lore_text=False):
        """‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡∏°‡πà"""
        if not self.bubble_list:
            logging.warning("üîÑ Cannot replace: no bubbles in list")
            return False

        try:
            logging.info(f"üîÑ Replacing last message with: '{new_text[:50]}...'")

            # ‡∏•‡∏ö bubble ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            last_bubble = self.bubble_list[-1]
            last_bubble.destroy()
            self.bubble_list.pop()

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
            self._add_new_message_bubble(new_text)

            # ‡πÅ‡∏™‡∏î‡∏á replacement indicator
            self._show_replacement_indicator()

            logging.info(f"‚úÖ Successfully replaced last message")
            return True

        except Exception as e:
            logging.error(f"Error replacing message: {e}")
            return False

    def _add_new_message_bubble(self, text, is_lore_text=False):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° bubble ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        # Parse message content
        speaker, message, speaker_color = self._parse_message(text)
        bubble_color = self._get_bubble_color(speaker)
        max_bubble_width = self.scrollable_frame.winfo_width() - 20

        # Create new bubble
        bubble = LightweightChatBubble(
            self.scrollable_frame,
            speaker,
            message,
            speaker_color,
            bubble_color,
            self.current_font_size,
            max_bubble_width,
            self.current_font_family,
        )

        # Add to list
        self.bubble_list.append(bubble)

        # Pack new bubble
        self._pack_new_bubble(bubble)

        # Manage bubble limit
        self._limit_bubbles()

        # Smooth scroll to latest
        self.root.after(50, self._smooth_scroll_to_latest)

        # Update status
        self._update_status()

    def _show_replacement_indicator(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        if hasattr(self, "status_label"):
            original_text = self.status_label.cget("text")
            self.status_label.config(
                text=f"{original_text} ‚Üª", fg="#4ade80"
            )  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß + ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå refresh

            # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            self.root.after(2000, lambda: self._reset_status_indicator(original_text))

    def _reset_status_indicator(self, original_text):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"""
        if hasattr(self, "status_label"):
            self.status_label.config(text=original_text, fg="#888888")

    # === CORE MESSAGE HANDLING - Enhanced with Smart Cache ===

    def add_message(self, text, is_force_retranslation=False, is_lore_text=False):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Smart Cache System ‚≠ê"""
        if not text or not text.strip():
            return
        try:
            # Debug log
            logging.info(
                f"üîÑ add_message called: force={is_force_retranslation}, smart_enabled={self.enable_smart_replacement}"
            )

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (
                self.enable_smart_replacement
                and is_force_retranslation
                and self.last_message_hash
                and self.last_message_hash in self.message_cache
            ):

                cached_data = self.message_cache[self.last_message_hash]

                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ã‡πâ‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                if self._is_likely_retranslation(text, cached_data["text"]):
                    logging.info(f"üîÑ Detected retranslation, replacing last message")
                    if self._replace_last_message(text, is_lore_text=is_lore_text):
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                        self.message_cache[self.last_message_hash]["text"] = text
                        self.message_cache[self.last_message_hash][
                            "timestamp"
                        ] = time.time()
                        return
                else:
                    logging.info(
                        f"üîÑ Force translate but not similar enough, adding new message"
                    )

            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà retranslation ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
            self._add_new_message_with_cache(text, is_lore_text=is_lore_text)

        except Exception as e:
            logging.error(f"Error in smart add_message: {e}")
            # Fallback: ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
            self._add_message_fallback(text)

    def _add_new_message_with_cache(self, text, is_lore_text=False):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        speaker, message, speaker_color = self._parse_message(text)
        message_hash = self._generate_message_hash(text, speaker)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° bubble
        self._add_new_message_bubble(text)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
        self.message_cache[message_hash] = {
            "text": text,
            "speaker": speaker,
            "timestamp": time.time(),
            "bubble_index": len(self.bubble_list) - 1,
        }
        self.last_message_hash = message_hash

        logging.info(
            f"‚úÖ Added message with cache - total: {len(self.bubble_list)} bubbles"
        )

    def _add_message_fallback(self, text):
        """‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏° - ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"""
        # Parse message content
        speaker, message, speaker_color = self._parse_message(text)
        bubble_color = self._get_bubble_color(speaker)
        max_bubble_width = self.scrollable_frame.winfo_width() - 20

        # Create new bubble
        bubble = LightweightChatBubble(
            self.scrollable_frame,
            speaker,
            message,
            speaker_color,
            bubble_color,
            self.current_font_size,
            max_bubble_width,
            self.current_font_family,
        )

        # Add to list
        self.bubble_list.append(bubble)

        # Pack new bubble intelligently (without repacking others)
        self._pack_new_bubble(bubble)

        # Manage bubble limit
        self._limit_bubbles()

        # Smooth scroll to latest with animation
        self.root.after(50, self._smooth_scroll_to_latest)

        # Update status
        self._update_status()

        logging.info(
            f"‚úÖ Added message (fallback) - total: {len(self.bubble_list)} bubbles"
        )

    def _pack_new_bubble(self, bubble):
        """Pack new bubble intelligently based on current mode - key improvement! üöÄ"""
        # Calculate dynamic spacing based on font size
        dynamic_pady = max(5, int(self.current_font_size * 0.8))
        pack_options = {"fill": tk.X, "pady": (0, dynamic_pady), "padx": (8, 8)}

        if self.reverse_mode.get():
            # Reverse mode: pack at the top
            if len(self.bubble_list) > 1:
                # Pack before the previous last bubble (which is now second-to-last)
                previous_bubble = self.bubble_list[-2]
                bubble.pack(before=previous_bubble, **pack_options)
            else:
                # First bubble - pack normally
                bubble.pack(**pack_options)
        else:
            # Normal mode: pack at the bottom (default)
            bubble.pack(**pack_options)

        logging.info(
            f"Packed new bubble in {'reverse' if self.reverse_mode.get() else 'normal'} mode"
        )

    def _smooth_scroll_to_latest(self):
        """Smooth animated scroll to latest message ‚ú®"""
        # Cancel any existing animation
        if self._scroll_animation_id:
            self.root.after_cancel(self._scroll_animation_id)
            self._scroll_animation_id = None

        # Update canvas first
        self.canvas.update_idletasks()

        # Determine target position
        target_y = 1.0 if not self.reverse_mode.get() else 0.0

        # Get current position
        current_view = self.canvas.yview()
        current_y = current_view[1] if not self.reverse_mode.get() else current_view[0]

        # Skip animation if already at target
        if abs(current_y - target_y) < 0.01:
            return

        # Calculate smooth animation steps
        steps = 8
        step_size = (target_y - current_y) / steps

        def animate_scroll(step=0):
            if step < steps:
                new_y = current_y + (step_size * (step + 1))

                # Apply smooth easing curve
                progress = (step + 1) / steps
                eased_progress = 1 - (1 - progress) ** 3  # ease-out cubic
                final_y = current_y + (target_y - current_y) * eased_progress

                if not self.reverse_mode.get():
                    self.canvas.yview_moveto(final_y - 0.1)
                else:
                    self.canvas.yview_moveto(final_y)

                # Schedule next animation frame
                self._scroll_animation_id = self.root.after(
                    25, lambda: animate_scroll(step + 1)
                )
            else:
                # Final position - ensure we're exactly at target
                self.canvas.yview_moveto(
                    target_y if self.reverse_mode.get() else target_y - 0.1
                )
                self._scroll_animation_id = None

        # Start animation
        animate_scroll()

    def _parse_message(self, text, is_lore_text=False):
        """‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Speaker"""

        # --- [ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà ] ---
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Lore Text ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if is_lore_text:
            speaker = "Lore"
            message = text.strip()
            speaker_color = "#a0a0a0"  # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Lore
            return speaker, message, speaker_color
        # --- [ ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ] ---

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Lore Text ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Logic ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠
        speaker, message, speaker_color = None, text.strip(), "#38bdf8"
        if "???" in text.split(":", 1)[0]:
            parts = text.split(":", 1)
            speaker, message, speaker_color = (
                parts[0].strip(),
                parts[1].strip() if len(parts) > 1 else "",
                "#a855f7",
            )
        elif "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?" in text or "What will you say?" in text:
            parts = (
                text.split("‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?", 1)
                if "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?" in text
                else text.split("What will you say?", 1)
            )
            speaker, message, speaker_color = (
                "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
                parts[1].strip() if len(parts) > 1 else "",
                "#FFD700",
            )
        elif ": " in text:
            try:
                speaker_part, message_part = text.split(": ", 1)
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô
                if len(speaker_part) < 35 and " - " not in speaker_part:
                    speaker, message = speaker_part.strip(), message_part.strip()
            except ValueError:
                pass

        return speaker, message, speaker_color

    def _get_bubble_color(self, speaker):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ bubble ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        return SINGLE_BUBBLE_COLOR

    def _limit_bubbles(self):
        """‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bubbles ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î"""
        max_bubbles = 100
        if len(self.bubble_list) > max_bubbles:
            # Remove oldest bubbles
            bubbles_to_remove = len(self.bubble_list) - max_bubbles
            for old_bubble in self.bubble_list[:bubbles_to_remove]:
                old_bubble.destroy()
            self.bubble_list = self.bubble_list[bubbles_to_remove:]
            logging.info(f"Cleaned up {bubbles_to_remove} old bubbles")

    def _scroll_to_latest(self):
        """Legacy instant scroll - kept for compatibility"""
        self.canvas.update_idletasks()
        self.canvas.yview_moveto(1.0 if not self.reverse_mode.get() else 0.0)

    def _update_status(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        self.status_label.config(
            text=f"{len(self.bubble_list)} msgs ‚Ä¢ {'‚•Å' if self.reverse_mode.get() else '‚•Å'}"
        )

    def toggle_reverse_mode(self):
        """‡∏™‡∏•‡∏±‡∏ö reverse mode - ‡πÉ‡∏ä‡πâ full repack ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"""
        self.reverse_mode.set(not self.reverse_mode.get())
        self.settings.set("logs_reverse_mode", self.reverse_mode.get())

        # Update button color if it's text-based
        if hasattr(self.reverse_button, "cget") and self.reverse_button.cget("text"):
            self.reverse_button.config(fg=self._get_reverse_color())

        # Full repack required for mode change
        logging.info(
            f"Toggle reverse mode to: {self.reverse_mode.get()} - performing full repack"
        )
        self._repack_bubbles()

    def _repack_bubbles(self):
        """Full repack - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (toggle mode, font wrapping change)"""
        if not self.bubble_list:
            return

        logging.info("Performing full repack of all bubbles")

        # Remove all bubbles from layout
        for bubble in self.bubble_list:
            bubble.pack_forget()

        # Calculate dynamic spacing based on current font size
        dynamic_pady = max(5, int(self.current_font_size * 0.8))
        pack_options = {"fill": tk.X, "pady": (0, dynamic_pady), "padx": (8, 8)}

        # Pack in correct order based on mode
        bubbles_to_pack = (
            reversed(self.bubble_list) if self.reverse_mode.get() else self.bubble_list
        )
        for bubble in bubbles_to_pack:
            bubble.pack(**pack_options)

        # Smooth scroll to appropriate position after repack
        self.root.after(100, self._smooth_scroll_to_latest)

    def toggle_transparency(self):
        """‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ 4 ‡∏£‡∏∞‡∏î‡∏±‡∏ö"""
        modes = {"A": "B", "B": "C", "C": "D", "D": "A"}
        alphas = {
            "A": self.normal_alpha,
            "B": self.transparent_alpha,
            "C": self.super_transparent,
            "D": self.solid_alpha,
        }
        self.current_mode = modes[self.current_mode]
        alpha = alphas[self.current_mode]
        try:
            if self.is_visible:
                self.root.attributes("-alpha", alpha)
                logging.info(
                    f"Changed transparency to mode {self.current_mode} (alpha: {alpha})"
                )
        except Exception as e:
            logging.error(f"Error setting transparency: {e}")

    # === WINDOW MANAGEMENT ===

    def check_screen_size_and_adjust(self, mbb_side="left", monitor_info=None):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏â‡∏•‡∏≤‡∏î - ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á

        Args:
            mbb_side (str): ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á MBB window ('left' ‡∏´‡∏£‡∏∑‡∏≠ 'right')
            monitor_info (dict): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≠‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á MBB
        """
        try:
            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ mbb_side parameter = ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ smart positioning
            use_smart_positioning = mbb_side and mbb_side in ["left", "right"]

            if not use_smart_positioning:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ geometry ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (logic ‡πÄ‡∏î‡∏¥‡∏°)
                current_geometry = self.root.geometry()
                if current_geometry and current_geometry != "1x1+0+0":
                    logging.info(f"Using existing geometry: {current_geometry}")
                    return

            # ‡πÉ‡∏ä‡πâ logic ‡πÅ‡∏ö‡∏ö‡∏â‡∏•‡∏≤‡∏î (‡πÉ‡∏´‡∏°‡πà) ‡∏´‡∏£‡∏∑‡∏≠ fallback (‡πÄ‡∏î‡∏¥‡∏°)
            self.root.update_idletasks()

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≠‡∏†‡∏≤‡∏û
            if monitor_info and use_smart_positioning:
                # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≠‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å MBB
                monitor_left = monitor_info["left"]
                monitor_right = monitor_info["right"]
                monitor_top = monitor_info["top"]
                monitor_bottom = monitor_info["bottom"]
                monitor_width = monitor_info["width"]
                monitor_height = monitor_info["height"]

                print(f"Log UI: Using MBB monitor info: {monitor_info}")
            else:
                # Fallback ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å
                try:
                    if HAS_WIN32:
                        # ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
                        screen_width = self.root.winfo_screenwidth()
                        screen_height = self.root.winfo_screenheight()
                        monitor_left = 0
                        monitor_right = screen_width
                        monitor_top = 0
                        monitor_bottom = screen_height
                        monitor_width = screen_width
                        monitor_height = screen_height

                        print(
                            f"Log UI: Using fallback screen dimensions: {screen_width}x{screen_height}"
                        )
                    else:
                        # Fallback ‡πÑ‡∏°‡πà‡∏°‡∏µ win32api
                        screen_width = self.root.winfo_screenwidth()
                        screen_height = self.root.winfo_screenheight()
                        monitor_left = 0
                        monitor_right = screen_width
                        monitor_top = 0
                        monitor_bottom = screen_height
                        monitor_width = screen_width
                        monitor_height = screen_height

                except Exception as e:
                    print(f"Failed to get monitor info for Log UI: {e}")
                    # Fallback ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å
                    screen_width = self.root.winfo_screenwidth()
                    screen_height = self.root.winfo_screenheight()
                    monitor_left = 0
                    monitor_right = screen_width
                    monitor_top = 0
                    monitor_bottom = screen_height
                    monitor_width = screen_width
                    monitor_height = screen_height

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Log
            if use_smart_positioning:
                # Smart positioning: ‡∏™‡∏π‡∏á 90% ‡∏Ç‡∏≠‡∏á‡∏à‡∏≠
                window_height = max(300, int(monitor_height * 0.9))
                window_width = 400  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Y (‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)
                y = monitor_top + max(0, (monitor_height - window_height) // 2)

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X ‡∏ï‡∏≤‡∏° MBB side ‡∏ö‡∏ô‡∏à‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                gap = 10  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏à‡∏≠

                if mbb_side == "left":
                    # MBB ‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢ ‚Üí Log UI ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    x = monitor_right - window_width - gap
                else:
                    # MBB ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤ ‚Üí Log UI ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    x = monitor_left + gap

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏à‡∏≠
                x = max(monitor_left, min(x, monitor_right - window_width))
                y = max(monitor_top, min(y, monitor_bottom - window_height))

                print(
                    f"Log UI positioned at: {x}, {y} (size: {window_width}x{window_height}, MBB side: {mbb_side})"
                )
            else:
                # Fallback positioning (logic ‡πÄ‡∏î‡∏¥‡∏°)
                window_height = max(300, int(monitor_height * 0.9))
                window_width = 400
                x = monitor_left
                y = max(monitor_top, (monitor_height - window_height) // 2)

                print(f"Log UI using fallback positioning: {x}, {y}")

            default_geometry = f"{window_width}x{window_height}+{x}+{y}"
            self.root.geometry(default_geometry)

            logging.info(f"Applied geometry for Log UI: {default_geometry}")

        except Exception as e:
            logging.error(f"Error adjusting Log window: {e}")
            # Fallback geometry
            self.root.geometry("400x600+0+200")

    def show_window(self, mbb_side="left", monitor_info=None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å

        Args:
            mbb_side (str): ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á MBB window ('left' ‡∏´‡∏£‡∏∑‡∏≠ 'right')
            monitor_info (dict): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≠‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á MBB
        """
        # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Lock > Smart Positioning > First Show Logic

        if self.is_position_locked and self.locked_geometry:
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
            print(f"Priority 1: Using LOCKED position: {self.locked_geometry}")
            self.root.geometry(self.locked_geometry)

        elif mbb_side and mbb_side in ["left", "right"] and monitor_info:
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ smart positioning ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ lock
            print(
                f"Priority 2: Using smart positioning for Log UI (MBB side: {mbb_side})"
            )
            self.check_screen_size_and_adjust(mbb_side, monitor_info)

        else:
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: First show logic (‡πÄ‡∏î‡∏¥‡∏°)
            if self._is_first_show:
                current_geometry = self.root.geometry()
                logging.info(f"Priority 3: First show geometry: {current_geometry}")

                # ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
                if not current_geometry or current_geometry in [
                    "1x1+0+0",
                    "200x200+0+0",
                ]:
                    self.check_screen_size_and_adjust(mbb_side, monitor_info)
                self._is_first_show = False

        self.root.deiconify()
        self.root.update_idletasks()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ resize handle
        if hasattr(self, "resize_handle"):
            self.resize_handle.place(relx=1.0, rely=1.0, anchor="se", x=-1, y=-1)
            if not hasattr(self, "is_ui_locked"):
                self.is_ui_locked = False
            cursor_type = "sizing" if self.is_ui_locked else "arrow"
            self.resize_handle.config(cursor=cursor_type)

        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á apply rounded corners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flat design
        # self.root.after(50, self.apply_rounded_corners_to_ui)

        self.root.lift()
        self.root.attributes("-topmost", True)
        self.is_visible = True

        # Set alpha based on transparency mode
        alpha_map = {
            "A": self.normal_alpha,
            "B": self.transparent_alpha,
            "C": self.super_transparent,
            "D": self.solid_alpha,
        }
        try:
            self.root.attributes(
                "-alpha", alpha_map.get(self.current_mode, self.normal_alpha)
            )
        except Exception:
            pass

        self._smooth_scroll_to_latest()

    def show(self, mbb_side="left", monitor_info=None):
        self.show_window(mbb_side, monitor_info)

    def hide(self):
        self.hide_window()

    # === DRAG & RESIZE FUNCTIONALITY ===

    def start_move(self, event):
        if not self._is_control_click(event):
            self.drag_start_x = event.x_root - self.root.winfo_x()
            self.drag_start_y = event.y_root - self.root.winfo_y()

    def do_move(self, event):
        if hasattr(self, "drag_start_x"):
            x = event.x_root - self.drag_start_x
            y = event.y_root - self.drag_start_y
            self.root.geometry(f"+{x}+{y}")

            # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if self.is_position_locked:
                self.locked_geometry = self.root.geometry()

                # Throttled saving (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                current_time = time.time()
                if current_time - self._last_save_time >= 2.0:
                    self.save_locked_position()
                    self._last_save_time = current_time
                    print(f"Lock mode: Throttled save at: {self.locked_geometry}")
                else:
                    print(
                        f"Lock mode: Position updated (will save on stop): {self.locked_geometry}"
                    )

    def stop_move(self, event):
        if hasattr(self, "drag_start_x"):
            delattr(self, "drag_start_x")
        if hasattr(self, "drag_start_y"):
            delattr(self, "drag_start_y")

        # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏•‡∏á settings
        if self.is_position_locked:
            self.locked_geometry = self.root.geometry()
            self.save_locked_position()
            print(f"Lock mode: Final position saved: {self.locked_geometry}")

    def save_locked_position(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏á settings.json"""
        try:
            if self.is_position_locked and self.root.winfo_exists():
                self.settings.set_logs_settings(
                    width=self.root.winfo_width(),
                    height=self.root.winfo_height(),
                    x=self.root.winfo_x(),
                    y=self.root.winfo_y(),
                )
                self.settings.set("logs_locked_geometry", self.root.geometry())
                print(f"Locked position saved to settings: {self.root.geometry()}")
        except Exception as e:
            logging.error(f"Error saving locked position: {e}")

    def _is_control_click(self, event):
        try:
            return isinstance(
                event.widget.winfo_containing(event.x_root, event.y_root), tk.Button
            )
        except:
            return False

    def start_resize(self, event):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Enhanced Ghost Frame üöÄ"""
        if not self.is_ui_locked:
            self.toggle_lock_ui()
            return

        # Store initial state
        self.resize_start_x = event.x_root
        self.resize_start_y = event.y_root
        self.resize_start_width = self.root.winfo_width()
        self.resize_start_height = self.root.winfo_height()
        self.resize_last_update = 0  # Throttling timestamp

        # Create enhanced ghost frame
        self.ghost_frame = tk.Toplevel(self.root)
        self.ghost_frame.overrideredirect(True)
        self.ghost_frame.attributes("-alpha", 0.35)  # ‡∏•‡∏î alpha ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        self.ghost_frame.attributes("-topmost", True)

        # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô UI ‡∏û‡∏£‡πâ‡∏≠‡∏° border ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î
        ghost_bg = appearance_manager.darken_color(appearance_manager.bg_color, 0.2)
        self.ghost_frame.configure(bg=ghost_bg, cursor="sizing")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á border frame ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ä‡∏±‡∏î
        self.ghost_border = tk.Frame(
            self.ghost_frame,
            bg=appearance_manager.fg_color,
            bd=0,
            highlightthickness=2,
            highlightcolor="#60A5FA",  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö border
            highlightbackground="#60A5FA",
        )
        self.ghost_border.pack(fill=tk.BOTH, expand=True, padx=1, pady=1)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.ghost_frame.geometry(self.root.geometry())
        logging.info("üéØ Enhanced ghost frame created for smooth resize")

    def do_resize(self, event):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î Ghost Frame ‡∏î‡πâ‡∏ß‡∏¢ throttling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‚ö°"""
        if not (self.is_ui_locked and hasattr(self, "ghost_frame")):
            return

        # Throttling: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏∏‡∏Å 16ms (60fps max) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        current_time = time.time() * 1000  # milliseconds
        if (
            hasattr(self, "resize_last_update")
            and (current_time - self.resize_last_update) < 16
        ):
            return
        self.resize_last_update = current_time

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ smooth constraints
        dx = event.x_root - self.resize_start_x
        dy = event.y_root - self.resize_start_y

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥/‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
        min_width, min_height = 300, 200
        max_width = self.root.winfo_screenwidth() - 50
        max_height = self.root.winfo_screenheight() - 100

        new_w = max(min_width, min(max_width, self.resize_start_width + dx))
        new_h = max(min_height, min(max_height, self.resize_start_height + dy))

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ö‡∏ö smooth (rounded ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î jitter)
        smooth_w = int(round(new_w / 5) * 5)  # Round to nearest 5px for smoothness
        smooth_h = int(round(new_h / 5) * 5)

        try:
            self.ghost_frame.geometry(
                f"{smooth_w}x{smooth_h}+{self.root.winfo_x()}+{self.root.winfo_y()}"
            )

            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏µ border ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢, ‡∏™‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏î)
            if hasattr(self, "ghost_border"):
                if (
                    smooth_w >= self.resize_start_width
                    and smooth_h >= self.resize_start_height
                ):
                    # ‡∏Ç‡∏¢‡∏≤‡∏¢ - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
                    self.ghost_border.configure(
                        highlightcolor="#10B981", highlightbackground="#10B981"
                    )
                elif (
                    smooth_w <= self.resize_start_width
                    and smooth_h <= self.resize_start_height
                ):
                    # ‡∏•‡∏î - ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
                    self.ghost_border.configure(
                        highlightcolor="#F59E0B", highlightbackground="#F59E0B"
                    )
                else:
                    # ‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
                    self.ghost_border.configure(
                        highlightcolor="#60A5FA", highlightbackground="#60A5FA"
                    )

        except tk.TclError:
            # ‡∏´‡∏≤‡∏Å ghost frame ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            pass

    def stop_resize(self, event):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏î‡πâ‡∏ß‡∏¢ fade-out animation ‡πÅ‡∏•‡∏∞ cleanup ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‚ú®"""
        if not hasattr(self, "ghost_frame"):
            return

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô cleanup
        try:
            final_width = self.ghost_frame.winfo_width()
            final_height = self.ghost_frame.winfo_height()

            # Smooth fade-out animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ghost frame
            def fade_out_ghost(alpha=0.35):
                try:
                    if alpha > 0.05 and hasattr(self, "ghost_frame"):
                        self.ghost_frame.attributes("-alpha", alpha)
                        self.root.after(20, lambda: fade_out_ghost(alpha - 0.07))
                    else:
                        # ‡∏à‡∏ö animation - ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ghost frame
                        if hasattr(self, "ghost_frame"):
                            self.ghost_frame.destroy()
                            delattr(self, "ghost_frame")
                        if hasattr(self, "ghost_border"):
                            delattr(self, "ghost_border")
                except tk.TclError:
                    # Ghost frame ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                    pass

            # ‡πÄ‡∏£‡∏¥‡πà‡∏° fade-out animation
            fade_out_ghost()

            # ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
            self.root.geometry(f"{final_width}x{final_height}")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞ refresh UI
            self.save_settings()
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á apply rounded corners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flat design
            # self.root.after(80, self.apply_rounded_corners_to_ui)
            self.root.after(120, self._repack_bubbles)

            logging.info(
                f"‚úÖ Resize completed: {final_width}x{final_height} with flat design"
            )

        except Exception as e:
            logging.error(f"Error in stop_resize: {e}")
            # Fallback cleanup
            if hasattr(self, "ghost_frame"):
                try:
                    self.ghost_frame.destroy()
                    delattr(self, "ghost_frame")
                except:
                    pass

        # Cleanup resize state variables
        for attr in [
            "resize_start_x",
            "resize_start_y",
            "resize_start_width",
            "resize_start_height",
            "resize_last_update",
            "ghost_border",
        ]:
            if hasattr(self, attr):
                delattr(self, attr)

    def toggle_lock_ui(self):
        self.is_ui_locked = not self.is_ui_locked
        self.resize_handle.config(cursor="sizing" if self.is_ui_locked else "arrow")

    # === SETTINGS MANAGEMENT ===

    def load_settings(self):
        try:
            logs_settings = self.settings.get_logs_settings()
            if logs_settings:
                # ‡πÇ‡∏´‡∏•‡∏î reverse mode
                self.reverse_mode.set(self.settings.get("logs_reverse_mode", False))

                # ‡πÇ‡∏´‡∏•‡∏î font size ‡πÅ‡∏•‡∏∞ font family
                font_size = logs_settings.get("font_size")
                if font_size and 10 <= font_size <= 28:
                    self.current_font_size = font_size
                    self._update_font_display()

                font_family = logs_settings.get("font_family")
                if font_family:
                    self.current_font_family = font_family

                # ‡πÇ‡∏´‡∏•‡∏î transparency mode
                mode = logs_settings.get("transparency_mode")
                if mode in ["A", "B", "C", "D"]:
                    self.current_mode = mode

                # ‡πÇ‡∏´‡∏•‡∏î window geometry ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ x, y
                if "x" in logs_settings and "y" in logs_settings:
                    width = logs_settings.get("width", 480)
                    height = logs_settings.get("height", 320)
                    x = logs_settings.get("x", 0)
                    y = logs_settings.get("y", 0)

                    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ geometry ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î
                    self.root.geometry(f"{width}x{height}+{x}+{y}")
                    logging.info(
                        f"Loaded logs window geometry: {width}x{height}+{x}+{y}"
                    )

                    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ default positioning
                    self._is_first_show = False

            # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock
            self.is_position_locked = self.settings.get("logs_position_locked", False)
            if self.is_position_locked:
                self.locked_geometry = self.settings.get("logs_locked_geometry", None)
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° lock
                if hasattr(self, "lock_button"):
                    if hasattr(self, "lock_icon") and self.lock_icon:
                        self.lock_button.config(image=self.lock_icon)
                    else:
                        self.lock_button.config(text="üîí", fg="#FF6B6B")
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status label
                    if hasattr(self, "status_label"):
                        self.status_label.config(text="position+UI Saved!")
                print(f"Loaded lock state: LOCKED, geometry: {self.locked_geometry}")
            else:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° unlock
                if hasattr(self, "lock_button"):
                    if hasattr(self, "unlock_icon") and self.unlock_icon:
                        self.lock_button.config(image=self.unlock_icon)
                    else:
                        self.lock_button.config(text="üîì", fg="#888888")
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status label
                    if hasattr(self, "status_label"):
                        self.status_label.config(text="Smart Positioning")
                print("Loaded lock state: UNLOCKED")

        except Exception as e:
            logging.error(f"Error loading settings: {e}")

    def save_settings(self):
        try:
            if self.root.winfo_exists():
                width = self.root.winfo_width()
                height = self.root.winfo_height()
                x = self.root.winfo_x()
                y = self.root.winfo_y()

                # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô set_logs_settings ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß
                self.settings.set_logs_settings(
                    width=width,
                    height=height,
                    x=x,
                    y=y,
                    font_size=self.current_font_size,
                    font_family=self.current_font_family,
                    transparency_mode=self.current_mode,
                    logs_reverse_mode=self.reverse_mode.get(),
                )

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lock ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
                self.settings.set("logs_position_locked", self.is_position_locked)
                if self.is_position_locked:
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    self.locked_geometry = self.root.geometry()
                    self.settings.set("logs_locked_geometry", self.locked_geometry)
                    print(f"Auto-saved locked position: {self.locked_geometry}")

                logging.info(
                    f"Saved logs settings: {width}x{height}+{x}+{y}, font:{self.current_font_size}, mode:{self.current_mode}, locked:{self.is_position_locked}"
                )
        except Exception as e:
            logging.error(f"Error saving settings: {e}")

    # === UTILITY METHODS ===

    def clear_logs(self):
        """Clear all messages with animation cleanup and reset cache"""
        # Cancel any ongoing scroll animation
        if self._scroll_animation_id:
            self.root.after_cancel(self._scroll_animation_id)
            self._scroll_animation_id = None

        for bubble in self.bubble_list:
            bubble.destroy()
        self.bubble_list.clear()

        # Clear smart cache
        self.message_cache.clear()
        self.last_message_hash = None

        self._update_status()
        logging.info("Cleared all log messages and cache")

    def toggle_smart_replacement(self):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
        self.enable_smart_replacement = not self.enable_smart_replacement
        status = "‡πÄ‡∏õ‡∏¥‡∏î" if self.enable_smart_replacement else "‡∏õ‡∏¥‡∏î"
        logging.info(f"Smart Replacement: {status}")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° smart ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà - flat design
        if hasattr(self, "smart_button"):
            self.smart_button.config(
                text=self._get_smart_icon(),
                fg=self._get_smart_color_flat(),
                bg=appearance_manager.bg_color,
            )

        if hasattr(self, "status_label"):
            self.status_label.config(text=f"Smart: {status}", fg="#888888")
            self.root.after(3000, lambda: self._update_status())  # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    def get_cache_stats(self):
        """‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ cache ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return {
            "total_cached": len(self.message_cache),
            "total_bubbles": len(self.bubble_list),
            "last_message": self.last_message_hash is not None,
            "smart_mode": self.enable_smart_replacement,
        }

    def add_message_from_translation(self, text, is_force_translate=False):
        """‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å MBB.py - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô force translate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        self.add_message(text, is_force_retranslation=is_force_translate)

    def cleanup(self):
        """Cleanup resources before closing with enhanced ghost frame cleanup"""
        try:
            # Cancel animations
            if self._scroll_animation_id:
                self.root.after_cancel(self._scroll_animation_id)
                self._scroll_animation_id = None

            # Enhanced ghost frame cleanup
            self.emergency_cleanup_ghost()

            self.save_settings()
            self.clear_logs()
            logging.info(
                "‚úÖ Translated logs cleanup completed with enhanced ghost cleanup"
            )
        except Exception as e:
            logging.error(f"Error in cleanup: {e}")

    # === ENHANCED RESIZE SYSTEM DEBUG ===

    def _is_ghost_frame_active(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ghost frame ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return hasattr(self, "ghost_frame") and self.ghost_frame.winfo_exists()

    def emergency_cleanup_ghost(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î ghost frame ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"""
        try:
            if hasattr(self, "ghost_frame"):
                self.ghost_frame.destroy()
                delattr(self, "ghost_frame")
            if hasattr(self, "ghost_border"):
                delattr(self, "ghost_border")

            # Cleanup all resize variables
            for attr in [
                "resize_start_x",
                "resize_start_y",
                "resize_start_width",
                "resize_start_height",
                "resize_last_update",
            ]:
                if hasattr(self, attr):
                    delattr(self, attr)

            logging.info("üßπ Emergency ghost frame cleanup completed")
        except Exception as e:
            logging.error(f"Error in emergency cleanup: {e}")
